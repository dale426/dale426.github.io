<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>时间复杂度&amp;空间复杂度</title>
      <link href="/blog/2019/js/common/sortbase/"/>
      <url>/blog/2019/js/common/sortbase/</url>
      
        <content type="html"><![CDATA[<p>【基础知识】考量一个算法的维度<br><a id="more"></a></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="时间频度"><a href="#时间频度" class="headerlink" title="时间频度"></a>时间频度</h3><p>  一个算法执行所耗费的时间。<br>  从理论上讲时间是不能计算出来的，必须上机运行测试才能知道，但我们不可能也没有必要对每个算法都上机运行测试，我们只需要知道哪个算法花费的时间多，哪个算法花费的时间少即可。并且一个算法花费的时间与算法中语句的执行次数成正比，所以一个算法中语句执行的次数多，它花费时间就多。<br>  一个算法中的语句执行次数称为语句频度或时间频度，记为O(n)。</p><h3 id="计算时间复杂度的具体步骤"><a href="#计算时间复杂度的具体步骤" class="headerlink" title="计算时间复杂度的具体步骤"></a>计算时间复杂度的具体步骤</h3><ol><li><p>找出算法中的基本语句<br>  算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。</p></li><li><p>计算基本语句的执行次数的数量级<br>  只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。</p></li><li><p>用大Ο记号表示算法的时间性能<br>  将基本语句执行次数的数量级放入大Ο记号中。</p></li></ol><blockquote><p>如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加;</p></blockquote><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><strong>O(1)</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a=<span class="number">2</span>;</span><br><span class="line">int b=<span class="number">2</span>;</span><br><span class="line">int c=<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>  以上三条单个语句的频度均为1，该程序段的执行时间是一个与问题规模n无关的常数。算法的时间复杂度为常数阶，记作T(n)=O(1)。注意：如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。</p><p><strong>O(n)</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i, n = <span class="number">100</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; n; i++ )  /执行n+<span class="number">1</span>次/</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  这段代码的时间复杂度为O(n)，因为循环体中的代码需要执行n次。</p><p><strong>O(n*n)</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int i, j, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; n; i++ )  /执行n+<span class="number">1</span>次/</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( j=<span class="number">0</span>; j &lt; n; j++ )    /执行n*(n+<span class="number">1</span>)次/</span><br><span class="line">&#123;</span><br><span class="line">printf(“I love you!”);<span class="regexp">/执行n*n次/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据以上代码，n=100，也就是说外层循环每执行一次，内层循环就执行100次，那么程序要运行完两个循环，需要执行100*100次，也就是n的平方，所以这段代码的时间复杂度为O(n*n)。</p><p>  那么问题就来了，要是有三个这样的嵌套循环，时间复杂度就是n*n*n。</p><h3 id="特殊的–-gt-选择排序法"><a href="#特殊的–-gt-选择排序法" class="headerlink" title="特殊的–&gt; 选择排序法"></a>特殊的–&gt; 选择排序法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int i, j, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>( j=i; j &lt; n; j++ )</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"选择排序"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上代码分析，当i=0时，内循环执行了n次；当i=1时，内循环则执行n-1次……当i=n-1时，内循环执行1次，所以总的执行次数是：<strong>n+(n-1)+(n-2)+…+1 = n(n+1)/2</strong>。用我们推导大O的攻略，第一条忽略，因为没有常数相加。第二条只保留最高项，所以n/2这项去掉。第三条，去除与最高项相乘的常数，最终得时间复杂度为O(n2)。</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>算法中用到的变量个数</p><p>O(n)</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典算法-选择排序&amp;冒泡排序</title>
      <link href="/blog/2019/js/common/sort001/"/>
      <url>/blog/2019/js/common/sort001/</url>
      
        <content type="html"><![CDATA[<p>【重拾算法】: 入门经典算法回顾，冒泡与排序<br><a id="more"></a></p><h3 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h3><p><em>选择排序法</em>是在要排序的一组数中，选出最小（或最大）的一个数与第一个位置的数交换；在剩下的数当中找最小的与第二个位置的数交换，即顺序放在已排好序的数列的最后，如此循环，直到全部数据元素排完为止。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">6</span> ,<span class="number">89</span>, <span class="number">28</span>, <span class="number">33</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">sortArr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(sortArr));</span><br><span class="line">  <span class="keyword">let</span> min;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = arr.length; i &lt; l<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    min = i;</span><br><span class="line">    <span class="comment">// 查找最小的那个数的索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = i + <span class="number">1</span>; k &lt; l; k ++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[k]) &#123;</span><br><span class="line">        min = k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min !== i) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">      arr[i] = arr[min];</span><br><span class="line">      arr[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 快速交换两个变量 [arr[i], arr[k]] = [arr[k], arr[i]] </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/public_s/images/arithmetic/select.gif" alt="图片"></p><p>时间复杂度： </p><ul><li>最好的情况下，正序列排列，即min每次是最小的数，只执行了内层的循环 <strong>n-1</strong> 次，时间复杂度为 <strong>O(n)</strong></li><li>最坏的情况下，内层基本语句的执行次数为<strong>n+(n-1)+(n-2)+…+1 = n(n+1)/2</strong>， 所以时间复杂度为O(n*n)</li></ul><p>空间复杂度为: O(1)</p><h3 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h3><p>冒泡排序算法的原理如下：</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">sortArr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(sortArr));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;  <span class="comment">/* 外循环为排序趟数，len个数进行len-1趟 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i <span class="number">-1</span>; j ++ ) &#123; <span class="comment">/* 内循环为每趟比较的次数，第i趟比较len-i次 */</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/public_s/images/arithmetic/bubble.gif" alt="图片"></p><p>时间复杂度： </p><ul><li>最好情况下，正序排列，只需要内层循环 <strong>n-1</strong> 趟，所以时间复杂度为 <strong>O(n)</strong></li><li>最坏情况下，需要进行 <strong>n-1</strong> 趟排序。每趟排序要进行 <strong>n-i</strong> 次关键字的比较, 所以内层的基本语句执行次数为 <strong>(n-1)*n / 2</strong>次， 时间复杂度为 <strong>O(n*n)</strong></li></ul><p>空间复杂度：<br><strong>O(1)</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS变量</title>
      <link href="/blog/2019/others/caa-var/"/>
      <url>/blog/2019/others/caa-var/</url>
      
        <content type="html"><![CDATA[<p>随着Web应用程序变得越来越大，CSS变得越来越大，越来越多，而且很多时候都很乱，在良好的上下文中使用CSS变量，为您提供重用和轻松更改重复出现的CSS属性的机制。 在“纯粹的”CSS支持变量之前，我们有像Less和Sass这样的预处理器。但是它们需要在使用前进行编译，因此（有时）会增加额外的复杂性。<br><a id="more"></a></p><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><p>在变量名前面添加两根连词线<code>--</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--bg</span>: <span class="number">#7f583f</span>;</span><br><span class="line">  <span class="attribute">--fz</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量名对大小写敏感；</p><h3 id="var-函数"><a href="#var-函数" class="headerlink" title="var()函数"></a>var()函数</h3><p>var()用于读取变量；<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gtoup</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--fz);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>var()</code>函数还可以使用第二个参数，表示变量的默认值，如果变量不存在就是用默认值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.group2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--co, green);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二个参数不处理内部的逗号或者空格，都会视为一个参数；<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--font-stack</span>, "<span class="selector-tag">Ro</span> <span class="selector-tag">boto</span>", "<span class="selector-tag">Helvetica</span>");</span><br><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--pad</span>, 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure></p><p><code>var()</code>函数中还可以使用变量声明<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--primary-color</span>: red;</span><br><span class="line">  <span class="attribute">--logo-text</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="变量值的类型"><a href="#变量值的类型" class="headerlink" title="变量值的类型"></a>变量值的类型</h3><ol><li>如果变量值是一个字符串，可以与其他字符串拼接；<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--bar</span>: <span class="string">'hello'</span>;</span><br><span class="line">  <span class="attribute">--foo</span>: <span class="built_in">var</span>(--bar)<span class="string">' 你好'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>实例<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">var</span>(--foo)<span class="string">'12345'</span>;</span><br><span class="line">  <span class="comment">/* 输出 hello 你好 12345 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><ol start="2"><li>数字不可以直接连接，需要使用<code>calc()</code>函数链接</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--mt</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.group</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="built_in">calc</span>(var(--mt) * <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>如果变量值带有单位，就不能写成字符串。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 无效 */</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">--foo</span>: <span class="string">'20px'</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 有效 */</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">--foo</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>变量的作用域读取时，优先级高的生效，和css层叠一致；<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--foo</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">--foo</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，–foo在选择器为 <code>.content</code>的范围内优先级更高；</p><p>因此通常将全局的变量放在根元素<code>:root</code>中；</p><blockquote><p><code>:root</code>选择器用匹配文档的根元素。<br>在HTML中根元素始终是HTML元素。</p></blockquote><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>可以在响应式布局的media命令中声明变量，使得不同的屏幕宽度有不通的变量值；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 普通读取这个 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">--bg</span>: red;</span><br><span class="line">  <span class="attribute">--secondary</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 宽度大于768时 读取这个 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">--bg</span>:  green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.group2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="兼容性处理"><a href="#兼容性处理" class="headerlink" title="兼容性处理"></a>兼容性处理</h3><p>对于不支持css变量的属性，使用如下写法；<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.group</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">var</span>(--bg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用<code>@support</code>检测；<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">supports</span> ( (--bg: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* supported */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">supports</span> ( not (--bg: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* not supported */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JavaScript操作CSS变量"><a href="#JavaScript操作CSS变量" class="headerlink" title="JavaScript操作CSS变量"></a>JavaScript操作CSS变量</h3><ol><li><p>js检测浏览器是否支持CSS变量；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSupported =</span><br><span class="line">  <span class="built_in">window</span>.CSS &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.CSS.supports(<span class="string">'bg'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isSupported) &#123;</span><br><span class="line">  <span class="comment">/* supported */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* not supported */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>js操作CSS变量</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.setProperty(<span class="string">'--bg'</span>, <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.getPropertyValue(<span class="string">'--bg'</span>).trim();</span><br><span class="line"><span class="comment">// 'red'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line"><span class="built_in">document</span>.body.style.removeProperty(<span class="string">'--bg'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么你要写博客？</title>
      <link href="/blog/2019/others/whyiblog/"/>
      <url>/blog/2019/others/whyiblog/</url>
      
        <content type="html"><![CDATA[<p>记录自己的生活、成长，以及技术、心智成熟的历程，回过头看自己之前写的东西，如果觉得自己那个时候很傻白甜，那说明此刻的你相比较于之前成长了；<br><a id="more"></a></p><h3 id="提供持续学习的动力"><a href="#提供持续学习的动力" class="headerlink" title="提供持续学习的动力"></a>提供持续学习的动力</h3><p>例如，我为自己设限每天写一千字，信息的不断输出给我带来恐惧，我害怕有一天我写无可写，于是我不停地阅读，通过个人的知识管理促使自己不断学习，提高核心竞争力。</p><h3 id="积累更多的知识"><a href="#积累更多的知识" class="headerlink" title="积累更多的知识"></a>积累更多的知识</h3><p>写并不是单纯的写。</p><p>例如你写着写着，你突然忘记了一个概念，于是上网找，找回来这个概念的时候，你重温这个概念，可能还会顺便看了一下这个概念的其他东西。</p><p>例如你需要获取第一手的资料，寻找信息来源本身就是一个知识积累的过程，同时，你慢慢就学会了鉴别知识：什么是没有用的心灵鸡汤，什么是不值得关注的吐槽名人，还有，在这个过程中，你还养成你的心智。</p><h3 id="提高将事情讲清楚的能力"><a href="#提高将事情讲清楚的能力" class="headerlink" title="提高将事情讲清楚的能力"></a>提高将事情讲清楚的能力</h3><p>很多东西你以为懂了，但当你在写下来的时候，你就觉得无从下手了。</p><p>如果一件事情你不能讲清楚，十有八九你还没有完全理解。</p><p>将事情写下来，慢慢就可以提高你的逻辑思维能力，分析能力，写会迫使你在你脑中搭建一个有条理的框架。例如我写这篇文章一样，我就将值得写博客的原因一点一点地罗列出来，事情就更加清晰，你也可以更好的思考问题。</p><h3 id="分享带来的连锁反应"><a href="#分享带来的连锁反应" class="headerlink" title="分享带来的连锁反应"></a>分享带来的连锁反应</h3><p>“通过分享，你获得了直接而快速的回报，你最终或许会发现你已将版权和“保留所有权利”抛诸脑后。新的经济学准则是：参与你作品的人越多，回报越高。在分享主义里，如果你愿意你可以保留所有权，但是我乐于分享。” by 毛向辉 《分享主义：一场思维革命》</p><p>互联网精神其中最重要的就是分享主义，基于分享主义，你可以享受到社会化及互联网给你带来的种种便利和好处，你分享了一个知识，你就成为了互联网中的一个点，这个点的大小由你自己来决定，互联网的大潮会将你的这个点推送到它所能触及的每个角落，让需要的人得到，同时，你的这个点也会继续扩大，连接到整个网络，这个点有可能连接成一张网，而你就是这张网的中心。</p><h3 id="帮你找到志同道合的人"><a href="#帮你找到志同道合的人" class="headerlink" title="帮你找到志同道合的人"></a>帮你找到志同道合的人</h3><p>在微博，在朋友圈，你可能找不到跟你志同道合的人，而在博客，你可以通过看他的几篇文章就迅速地理解认同这个人，即使你没有见过这个人，但你也可以通过这种关联来相互学习。</p><p>如果你在一个领域有相当的了解，你将这些内容发在网络上，网络上跟你志趣相投的人也会被你吸引过来，根据吸引力法则，你是怎样的人你就被怎么样的人吸引，这就是博客所能赋予你的魅力。</p><p>即使博客没有被他人关注，我们依然可以找到同好，你可以自己将博文转载到其他站点，人们会通过搜索引擎找到你，有邮件、微博等工具，我们不乏与他人交流的途径。by Gabriel Weinberg《Why I blog》</p><h3 id="记录成长"><a href="#记录成长" class="headerlink" title="记录成长"></a>记录成长</h3><p>隔一段时间，你再回头看你写的博客，你会发现自己正在通过这样的方式在不断的成长，这种成长在自己眼里是一种财富，在别人眼里是一张地图，你得到了收获，不断修正自己的错误，别人得到了指引，避免走弯路。</p><p>更多的情况是当你回望自己的时候你会发现自己是一个傻逼，so what，that is what I am！</p><h3 id="培养持续做一件事情的能力"><a href="#培养持续做一件事情的能力" class="headerlink" title="培养持续做一件事情的能力"></a>培养持续做一件事情的能力</h3><p>开始是坚持，后来是习惯，接着喜欢。以后当有人对你说，「你写那么多有用的东西，你真的很厉害啊！」你可以笑而不语，也可以大声说道：「你妹，你不知道我开始的时候多么痛苦！」</p><p>让你长久地去跑步，你可能做不到；让你每个月看一本书，你也可能做不到；但让你持续地写一个博客，你可以做得到。</p><p>你不相信？你不试试你怎么知道？</p><p>默默地持续做一件事是一种难得的能力，也是一种难得的品质。</p><h3 id="讨论反思"><a href="#讨论反思" class="headerlink" title="讨论反思"></a>讨论反思</h3><p>每人都会有思维的盲点，就好像这篇文章一样，可能你觉得我可能说得不对，你可以反驳我，我欢迎这种讨论，因为讨论的过程中会产生各种的思维的碰撞，这种碰撞会让你反思，也会激发出你新的灵感，这种讨论反思给自己的带来巨大的受益。</p><p>互联网给你的反馈就是让你承受更多，接受更多，成为一个更好的人。</p><h3 id="搜寻到你意想不到东西"><a href="#搜寻到你意想不到东西" class="headerlink" title="搜寻到你意想不到东西"></a>搜寻到你意想不到东西</h3><p>世界不止是你的家，你的公司，你的朋友圈，你应该去发现一个更大的世界，通过写博客，你会知道世界上还有很多人像你一样在写博客，这些人和知识正在世界的某个角落在等着你。</p><p>例如，在写这篇文章的过程中，我才知道了Gabriel Weinberg，我才要将阳志平的博客重读一遍。写的过程会让你有很多新的发现，这些新的发现都值得你去再写下来，总结分享出去。</p><p>一个人在做一件属于自己的事<br>很多你认为自己很牛逼的事情都是自己一个人做出来。</p><p>别人在刷微博，你在看书，别人在看穿越剧，你在学英文，别人在去唱K，你在写个人总结。吃饭也要找同伴，出游要找同伴，看电影要找同伴，你上一次一个人在做一件属于自己的事是在什么时候？</p><p>如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，收到的阻力也会越大。因为你没有迎合社会习俗，而是一步步地与它背道而驰。如果自己就是潮水的一部分 ，怎么能看见潮流的方向呢？你只能永远保持质疑，问自己，什么话是我不能说的？为什么？——Paul Graham《不能说的话》</p><h3 id="互联网的身份识别："><a href="#互联网的身份识别：" class="headerlink" title="互联网的身份识别："></a>互联网的身份识别：</h3><p>一个长期的价值博客是一份很好的简历。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。</p><p>这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。by 刘未鹏</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你可能想不到在白纸的左边（不值得写博客的原因）写什么了，想不到写个「博客时代已经过去」或者「我没有时间」也可以，但与此同时，你也可以用那些时间去思考一下「怎么做到长期写一个价值博客」。</p><p>本文转载自 <a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat" target="_blank" rel="noopener">陈素封——为什么你要写博客？</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端 H5 开发问题汇总</title>
      <link href="/blog/2019/mobile/h5-dev-summary/"/>
      <url>/blog/2019/mobile/h5-dev-summary/</url>
      
        <content type="html"><![CDATA[<p>各个大佬的h5开发问题总结以及解决方案<br><a id="more"></a></p><ol><li><a href="https://www.nihaoshijie.com.cn/index.php/archives/455/#more" target="_blank" rel="noopener">移动web总结–吕小鸣前端博客</a></li><li><a href="https://github.com/AlloyTeam/Mars/tree/master/issues" target="_blank" rel="noopener">移动端问题列表–腾讯AlloyTeam</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成为一个优秀的程序员~</title>
      <link href="/blog/2019/others/Excellent-programmer/"/>
      <url>/blog/2019/others/Excellent-programmer/</url>
      
        <content type="html"><![CDATA[<p>编程是一项聪明人玩的游戏，它既是对智力的考验，也是对习惯的考验，智力的好坏取决于父母的基因，人们无从左右，但习惯的好坏却是可以不断培养。一项由美国芝加哥大学国家研究组织进行的综合社会调查，公布了“十大最痛苦工作”排行榜，其中IT主管成了最让人痛苦的职业。程序员如何才能让自己的“痛苦”的职业不那么痛苦呢？<br><a id="more"></a></p><blockquote><p>世间少有天才，所谓天才，只不过是把别人喝咖啡的功夫都用在工作上了。所以，对于绝大多数还称不上天才的程序员而言，以下这些编程的好习惯都是无数前人智慧的结晶，具有相当意义的参考价值。</p></blockquote><p>（1）<strong>估算解决问题所需要的时间。</strong>为自己定一个时间限制，如果在这期间未能解决问题，那就去寻求帮助，或到网上找答案，而不是尝试去做“超级堆码员”，因为很多问题，你很少会是这个世界上唯一一个遇到的人。站在别人的肩膀上，会让你的形象变得高大、伟岸。</p><p>（2）<strong> 理解编程语言的原理。</strong>三流的人才懂应用，二流的人才懂开发，一流的人才懂原理，要想学好一门编程语言，掌握语言的原理是必不可少的。各种语言之间存在相似之处，你所选择的语言，你应该觉得“舒服”，并且能够写出有效（而且简洁）的代码。最重要的，让语言去适应项目，反之亦然。</p><p>（3） <strong>重视，但不过于注重程序的设计模式。</strong>在大中型系统中，引入设计模式，往往能极大地提高系统研发的效率。但设计模式并非万金油，有时候，写一个简单的算法，要比引入某种模式更容易。如果一个100行就能写完的脚本，最终却使用了8个类，10个接口，外加一大堆范式和标记符，结果导致97%的代码不做任何事情，这种优化又有什么意义？在多数情况下，程序代码应是简单易懂，而不应该是老太婆的裹脚布—又臭又长。</p><p>（4） <strong>做好版本控制，并及时备份代码。</strong>编码时，最痛苦的事情不是有多少bug没解决，而是突然停电了，一天的工作却没有保存。版本控制时，最好使用版本控制软件。无论什么时候改变自己的程序，它们都会将其保存为.bak文件。</p><p>（5）  <strong>对项目文件归类保存。</strong>可以把项目文件放到SOURCE、HEADERS、MAKE、EXES等不同的文件夹中。如果工程包含多个源文件，则可以建立一个README文件，注明每个源文件、数据文件、临时文件以及日志文件(如果有的话)的作用。还可以注明编译和运行步骤。</p><p>（6）<strong>动手编码之前，先做好分析和设计。</strong>项目开始之初，不要急于编码，而应该做好详细的需求与设计。做需求确实很难，不然也不会有程序员发出这样的牢骚：需求无非两种，一种是“你妹的，这还用做？”，另一种是“你妹的，这也能做？”不仅如此，实践和分析设计过程也可存在很大的矛盾，但是好的分析会避免过早走向一个错误的方向，好的设计可以避免混乱，否则，很有可能忙活了很久，最后发现方向错了或是架构错了，需要不断的监测、修改与调试，甚至是完全推翻以前的工作，重新设计，工作的成果看起来更像一个三岁小孩的涂鸦，而不是意见艺术作品，“捡了芝麻却丢了西瓜”。永远不要在没有任何设计的前提下就开始编码，除非所编代码不重要。</p><p>（7）<em>多向其他优秀程序员学习。</em>你有一个苹果，我也有一个苹果，我们交换苹果，你我还是有一个苹果；你有一种思想，我也有一种思想，我们交换思想，你我就有了两种思想。其实，一个人能走多远，要看他与谁同行；一个人有多优秀，要看他有谁指点；一个人有多成功，要看他有谁相伴，更何况“一山总比一山高”。休息放松固然重要，但需要适可而止，生命不息，奋斗不止，尤其是年轻的时候，更是如此。时间的强大是不可逆转，再繁华的都会归于尘土，与其把大把大把的时间浪费在打dota、玩三国杀或是无聊发呆上，还不如与其他优秀程序员坐在一起边喝咖啡边交流或是研究他们编写的代码，吸收他们的经验转化为自己所用。在与这些人的沟通中，学习他们解决和自己相同的任务时所使用的方法，在此过程中所学知识可能会帮你省下几个星期的时间。我们不赞成与臭棋佬下棋，棋会越下越臭的观点，但不可否认这样一个事实：和什么样的人在一起，就会有什么样的人生，和勤奋的人在一起，你不会懒惰；和积极的人在一起，你不会消沉；与智者同行，你会不同凡响；与高人为伍，你能登上巅峰。</p><p>（8）<strong>优化代码。</strong>优雅的代码非常的易读，所以如果时间允许，应该尽可能地优化代码，对时间和空间进行合理分配与使用。之前声明的一些变量，现在可能没用了。同样，并不依赖循环的一些声明可以移到循环模块之外去。否则后续开发或是技术提供会比较困难。但也需要注意，优化后的代码并不是越简短越好，用的语法越偏僻越好，因为晦涩的代码，维护成本会非常高，而且好的代码不但要实现功能，更要好维护，最好是A写的代码让B能很轻易的理解和修改。</p><p>（9）<strong>加强测试。</strong>测试的重要性并不亚于开发，所以要非常注重程序自测试。测试时，一般使用工具为主，人工为辅的策略，工具包括用单元测试，assert语句，代码测试容器，人工指用 print 和debugger 一行一行跟踪。</p><p>（10）<strong>使用输出日志。</strong>打印输出函数可以跟踪变量的执行，但频繁地插入打印会使得屏幕的输出很乱，而写一个日志函数，可以保证 Debug 的时候的输出以一种统一的，可管理的方式出现，这样在最后发布稳定版本的时候，只需要简单的几行命令就可以从代码中剔除所有的日志打印行。</p><p>（11）<strong>检查代码。</strong>代码要经常检查（包括自查和其他同事检查）。在提交代码前，找个同事一起坐下来，向他解释代码做了哪些修改。这样做的过程中通常能够发现代码中的错误，而不需要同事说一句话。这比自己审查自己的代码要有效的多。将代码的bug发现的越早，成本越低。</p><p>（12）<strong>回顾代码。</strong>在看到自己以前的代码时，通常会有两种矛盾不同的想法：第一种：我怎么写了这么烂的代码；第二种，我写的代码还是挺有成就感的。其实，经常回顾以前的代码，往往会触发新的想法，以及对以前编码更深层次的思考。</p><p>（13）<strong>编码不能想当然，任何时候都要严谨。</strong>一个简单的项目，表面上看可能可以轻松完成，其实不然，一个使用Microsoft Access的、只有3个页面的网站，最后很有可能会变成一个有30个页面并使用SQL Server作为数据库的网站。所以除非有一个类、组件或者一段已经写好的代码，并且在现有的项目已经测试通过，否则，切不可掉以轻心。</p><p>（14）<strong>任何软件都会有BUG。</strong>BUG像幽灵一样，它是永远也改不完的，所以关键是要修复严重的、影响业务的、显眼的Bug。一个软件项目，参与的人数越多，并不代表软件可靠性越好，相反，“人多手杂”，而且需求越变更，潜在的Bug会越来越多，很多时候，也许只是修改了一行代码，其很有可能影响到很多关键流程的执行。</p><p>（15） <strong>养成耐心、冷静的好习惯。</strong>作为一名程序员，不能像普通人一样被计算机掌控，而应该作为计算机的主人，去掌控计算机。所以，一定要有足够的耐心，当程序运行不正确时，要冷静下来，站在计算机的角度去看问题、分析问题。</p><p>（16） <strong>遵循编程规范。</strong>例如“==”与“=”的区别；合理使用缩进；使用循环和条件语句时，先把左右括号对应起来，然后再在里面写其他语句；避免使用幻数（magic numbers）；使用有意义的变量和函数名称，例如，使用‘radius’来代替圆的半径，而不是用‘r’来表示。</p><p>（17）<strong>了解底层知识。</strong>优秀的程序员不会只关注程序如何实现，而会深层次地剖析其实现机理，所以，程序员要对自己的操作系统和硬件要有足够的了解，从CPU的执行方法，到操作系统的运转，到程序的编译链接，到代码的加载与运行，到程序的调试，最后到实现的功能这一整套的内容，只有做到这样，才能真正提高。</p><p>（18）<strong>要聪明但不要“小聪明”。</strong>不反对走捷径，但是一定要论证充分，否则，可能会产生很多潜在的bug。编码中走捷径也许能够提高程序的可读性以及效率，但是如果论证不充分，不能把所有的潜在问题考虑周全，很有可能犯了丢了西瓜拣了芝麻的错误。最好的论证方法是多和他人商量，请别人检查自己的工作，将问题提早暴露。所以，不要为了做成某件事却忽略过程的连带效应，也许有一天你会为你当初的“小聪明”买单。</p><p>（19）<strong>要有创新的想法。</strong>对于大型企业而言，离开了创新，就等于失去了生命力，对于程序员个人而言，离开了创新，就等于停止了进步的脚步。虽然说天下学术全是抄，俨然一副“君不见创新项目一大堆，都被抄死化成灰”架势，但是不能因此而放弃创新，因为大地不可以因为有畜牲吃草而不复生机，山泉也不会因为有王八偷水而不冒活水。所以，无论工作有多忙，生活有多艰辛，都要尽可能地保持有一颗生机灵动的心。因为这个东西是别人偷不走的，也是最大的财富。即使暂时不具备这个东西，也要在生活中用心经营、好好培养。创新不一定要是改变全世界的大举，也不一定非得是世界上第一个做这件事的人，任何一种能改善生活的行为都可以认为是一种创新。例如写一个脚本去改变重复劳动或是采用什么方式解放自己。</p><p>（20） <strong>对待知识要刨根问底，要有“打破沙锅问到底”的决心。</strong>“知识就像内裤，看不见却很重要”，在工作中，不能只知其然，不知其所以然，要不懈追求对细节一丝不苟的实干作风与敬业精神，而不是浮于表面，满足于填鸭，满足于考试交差或随便应付，请记住，这个世界牛逼的人少，装逼的人多，要从深层次去想其背后的思想和原理是什么。任何行业都有核心技术，掌握某一项核心技术，就可以让你进入这个行业并在其中生存，反之仅仅浅尝辄止，就会让你遭遇失败，抱怨不公。例如学会了C++面向对象程序设计，就应该弄清楚一个对象在编译后，在汇编代码中是如何被初始化的；就应该弄清楚这个对象的各个成员在内存中是如何存放的；就应该弄清楚当一个成员函数被调用时，编译器在汇编代码中加入了哪些额外的动作；就应该弄清楚虚函数的调用是如何实现的，而这些东西没有人强迫你去弄懂，只有你自己。想得多了，自己的层次才有可能提高，如果只是停留在被动的接受，那很难有所提高。</p><p>（21）<strong>尽可能复用成熟代码。</strong>如果有现成的允许使用的经过测试的代码或程序库，并且有人维护或维护成本可以接受，程序员应该尽量使用现有代码和库来节省时间和开发测试成本。</p><p>（22）<strong>多一份追求完美的执着。</strong>人是不完美的，但人们都在追求完美，程序也一样，所以程序员要去追求完美。追求完美的人更容易出色、更具责任心，做事往往也显得更专业。</p><p>（23）<strong>不要心存侥幸，可能出错的地方一定会出错，偶尔发生偶尔不发生的问题就是大问题。</strong>所以，对于一些常见的问题，一定做到防微杜渐：每个变量都做初始化；每个函数都做声明；引用每个参数都会做有效性检查；在可能出错的每个地方都会做边界条件检查等等。这样开发出来的程序一定会稳固很多，就是出错也会很容易修改。而一些没经过正规培训或是半路出家的所谓的高手，一般开发速度很快，三下两除二的就开发完成了，结果很可能出现“功能大体实现，bug总是在变”的情况，最后花费很长的时间来修改代码中的bug，总时间甚至会大大延期。而真正的高手，追求的境界是零缺陷代码。</p><p><strong>每个人的路都在自己的脚下，自己过得怎么样，也只有自己心里明白。要想让自己的编程变得快乐有趣，还是应该努力培养一些好的习惯。也许上面的这些好习惯，要想都能在实际生活中落实并不是一件容易的事情，恐怕只有“大牛”们才能完全做到了，但只要你不断地朝着那个方向努力，相信你也会在这个努力的过程中得到长足的进步。</strong></p><p>本文转载自 <a href="https://blog.csdn.net/u013628152/article/details/46137705" target="_blank" rel="noopener">十五楼亮哥</a></p><p>————-以上 自我审查， 进步 ——————–</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些简单的算法题</title>
      <link href="/blog/2019/js/common/js-fontview/"/>
      <url>/blog/2019/js/common/js-fontview/</url>
      
        <content type="html"><![CDATA[<p>算法对一个程序员应该也很重要的， 毕竟需要逻辑思维的整合；</p><a id="more"></a><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>题目是这样的：<br>编写一个 function 实现一下功能</p><ul><li>fn(1)(2)(3)() // 6</li><li>fn(1)(2)(3)…(n) // 计算乘积 .</li></ul><p>拿到这个题的时候第一眼看到 n， 应该是要 自调用 即 【递归】。</p><ol><li><p>于是 直接手撸开始…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn() &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堵住了 不知道怎么弄了….</p></li><li><p>尝试 2 ：<br>值要保存， 应该要用到闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">1</span>; <span class="comment">// 用来保存值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">      num *= temp; <span class="comment">// 计算当前的值</span></span><br><span class="line">      <span class="keyword">return</span> sub; <span class="comment">// 递归调用</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有参数了 需要返回前面存储的值</span></span><br><span class="line">      <span class="comment">// 应为这是个闭包函数， num的值是不会被销毁的</span></span><br><span class="line">      <span class="keyword">let</span> tempNum = num;</span><br><span class="line">      num = <span class="number">1</span>; <span class="comment">// 重置， 否则下次调用 外层的 fn 函数 会将之前的结果集 累乘起来</span></span><br><span class="line">      <span class="keyword">return</span> tempNum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>优化使用函数柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">      [].push.apply(args, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>.callee</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> arg2 = [...args];</span><br><span class="line">      args.length = <span class="number">0</span>; <span class="comment">// 成功计算一次后 清除闭包中保存的数</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, arg2)   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求乘积</span></span><br><span class="line"><span class="keyword">var</span> mul = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].reduce.call(<span class="built_in">arguments</span>, (total, next, index) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> total * next</span><br><span class="line">    &#125;, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = currying(mul);</span><br><span class="line"></span><br><span class="line">fn(<span class="number">5</span>)(<span class="number">2</span>)()   <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>查找字符串 b 是否在字符串 a 中， 前提， 不能用 slice splice subString 正则；</p><p>无非就是一个一个的寻找嘛 for 循环解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findStr</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> aArr = a.split(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> bArr = b.split(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> aArr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (aArr[key] == bArr[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">// 找到第一个起始位置</span></span><br><span class="line">      <span class="keyword">let</span> t = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bArr[i] == aArr[<span class="built_in">Number</span>(key) + i]) &#123; <span class="comment">// 注意 字符串 + 数字  = 字符串</span></span><br><span class="line">          t.push(<span class="built_in">Number</span>(key) + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果找到就不用继续了</span></span><br><span class="line">      <span class="keyword">if</span> (t.length == bArr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 总结: 写代码前 先构思伪代码， 不能一上来就开始写， 容易进入误区 ~</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ES6中的Proxy实现双向绑定</title>
      <link href="/blog/2019/frame/vue/vue-scaffold2/"/>
      <url>/blog/2019/frame/vue/vue-scaffold2/</url>
      
        <content type="html"><![CDATA[<p>摘要: 使用proxy代理实现双向绑定<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"paragraph"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  /*</span><br><span class="line">    只要更改proxyObj的属性就会触发代理事件、</span><br><span class="line">      1. 更改model中的数据、</span><br><span class="line">      2. 触发视图的更新</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> paragraph = <span class="built_in">document</span>.getElementById(<span class="string">"paragraph"</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// data数据</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="actionscript">    text: <span class="string">'ES6的Proxy实现双向绑定'</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> handler = &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(target, prop, value)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">      /*  @&#123;arguments&#125;</span><br><span class="line"><span class="javascript">      <span class="number">1.</span> target 用<span class="built_in">Proxy</span>包装的目标对象  例如下文中的 data</span></span><br><span class="line">      2. props  目标对象的属性</span><br><span class="line">      3. value更改的值 </span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (prop === <span class="string">'text'</span>) &#123;</span></span><br><span class="line">        target[prop] = value;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 更新视图</span></span></span><br><span class="line">        paragraph.innerHTML = value</span><br><span class="line">        input.value = value</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* </span><br><span class="line"><span class="actionscript">    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">(target, prop)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> target[prop] || <span class="string">'属性不存在'</span></span></span><br><span class="line">    &#125; </span><br><span class="line">    */</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> proxyObj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, handler); <span class="comment">// 代理data对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    proxyObj.text = event.target.value  <span class="comment">// 更改代理对象的属性值</span></span></span><br><span class="line"><span class="actionscript">  &#125;, <span class="literal">false</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 初始化</span></span></span><br><span class="line">  proxyObj.text = data.text;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">    proxy的优势</span><br><span class="line">  </span><br><span class="line"><span class="javascript">    <span class="number">1.</span> <span class="built_in">Proxy</span>可以直接监听对象而非属性</span></span><br><span class="line"><span class="javascript">    <span class="number">2.</span> <span class="built_in">Proxy</span>可以直接监听数组的变化， 而<span class="built_in">Object</span>.defineProperty只有规定的<span class="number">8</span>种方法修改才可以</span></span><br><span class="line"><span class="javascript">    <span class="number">3.</span> <span class="built_in">Proxy</span>返回的是一个新对象,我们可以只操作新的对象达到目的,而<span class="built_in">Object</span>.defineProperty只能遍历对象属性直接修改。</span></span><br><span class="line">   */</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue双向绑定原理学习（2）</title>
      <link href="/blog/2019/frame/vue/vue-scaffold/"/>
      <url>/blog/2019/frame/vue/vue-scaffold/</url>
      
        <content type="html"><![CDATA[<p>摘要: 手写vue双向绑定实现原理<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vue原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vue_root"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">"mybox"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"mytext"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"mytext"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/* 数据响应式原理实现</span><br><span class="line"></span><br><span class="line">1. 首先构建 Vue类、 Watcher类， 使用订阅发布者模式</span><br><span class="line">2. 实现MVVM中的由 M 到 V， 把模型中的数据绑定到视图上</span><br><span class="line">3. 实现由 V 到 M， 当文本框输入时或者事件触发时 </span><br><span class="line">【1】 更新模型中的数据，</span><br><span class="line">【2】同时也更新相对应的视图 </span><br><span class="line"></span><br><span class="line">原理：</span><br><span class="line"></span><br><span class="line"><span class="javascript">vue实现数据响应式的原理利用了 <span class="built_in">Object</span>.defineProperty()这个方法重新定义了对象获取属性值（<span class="keyword">get</span>）和设置属性值（<span class="keyword">set</span>）的操作来实现的</span></span><br><span class="line"><span class="javascript">vue <span class="number">3.0</span> 是通过ES6中的 <span class="built_in">Proxy</span>对象来实现</span></span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 创建 Vue 类</span></span></span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">constructor</span>(options) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$options = options</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$data = options.data</span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>._directive = &#123;&#125; <span class="comment">// 订阅者容器</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.Observer(<span class="keyword">this</span>.$data) <span class="comment">// 劫持数据</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.Compile(<span class="keyword">this</span>.$el)    <span class="comment">// 模板解析</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 劫持数据</span></span></span><br><span class="line">Observer(data) &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>._directive[key] = [] <span class="comment">// 初始订阅者容器  存放watcher 实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> val = data[key]</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> watch = <span class="keyword">this</span>._directive[key]</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// this.$data中的每个属性 发生赋值时，都要更新视图</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> val</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript"><span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newVal)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 当改变值时 更新视图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (newVal !== val) &#123;</span></span><br><span class="line">val = newVal</span><br><span class="line"><span class="javascript">watch.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span></span><br><span class="line">element.update()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 模板解析</span></span></span><br><span class="line">Compile(el) &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">let</span> nodes = el.children <span class="comment">// 获取 子元素节点</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> node = nodes[i]</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 如果有子元素递归调用</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (node.children.length) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.Compile(node)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-text'</span>)) &#123;  <span class="comment">// hasAttribute 元素拥有指定属性</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-text'</span>); <span class="comment">// 获取属性名</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>._directive[attrVal].push(<span class="keyword">new</span> Watcher(node, <span class="keyword">this</span>, attrVal, <span class="string">'innerHTML'</span>))  <span class="comment">// 添加订阅者</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);  <span class="comment">// mytext</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>._directive[attrVal].push(<span class="keyword">new</span> Watcher(node, <span class="keyword">this</span>, attrVal, <span class="string">'value'</span>))  <span class="comment">// 添加订阅者</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 绑定事件、</span></span></span><br><span class="line"><span class="actionscript">node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$data[attrVal] = node.value <span class="comment">// event.target.value</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">&#125;)().bind(<span class="keyword">this</span>)) <span class="comment">// 使用闭包的方法， 直接使用function也是可以的</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 监听添加 订阅者</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 【1】. 初始化视图</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 【2】. 更新视图</span></span></span><br><span class="line"><span class="actionscript"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">constructor</span>(el, vm, exp, attr) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.el = el</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.vm = vm</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.exp = exp</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.attr = attr</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.update()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 更新视图</span></span></span><br><span class="line">update() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建vue实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#vue_root'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">mytext: <span class="string">'vue双向绑定原理实现'</span>,</span></span><br><span class="line"><span class="actionscript">mybox: <span class="string">'这是一个box'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-class类与继承</title>
      <link href="/blog/2019/js/common/es6-class/"/>
      <url>/blog/2019/js/common/es6-class/</url>
      
        <content type="html"><![CDATA[<p>tips: js继承探究之class<br><a id="more"></a></p><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    add(x, y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">calc</span> <span class="keyword">extends</span> <span class="title">example</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x,y) &#123;</span><br><span class="line">        <span class="keyword">super</span>(x,y); <span class="comment">// 子类构造函数必须使用super调用父类的构造函数;</span></span><br><span class="line">        <span class="keyword">this</span>.z = x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    mul(x,y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x*y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> div(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类生成实例"><a href="#类生成实例" class="headerlink" title="类生成实例"></a>类生成实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; example, calc &#125; <span class="keyword">from</span> <span class="string">'../../utils/class_example.js'</span>;</span><br></pre></td></tr></table></figure><pre><code>* class example类，【假装相当于是一个构造函数】* 这个类【假构造函数】是有另外一个真的构造函数 constructor生成* 这个类【假构造函数】中的方法其实是挂载在自身prototype上的；* * 当用new 这个类生成实例时* var 实例myExample = new 这个类【假的构造函数】* 实例myExample能够调用原型中(原型指的是构造函数的prototype对象)的方法，也就是这个类【假的构造函数】的prototype上的方法* example.prototype === myExample.__proto__   // true</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myExample = <span class="keyword">new</span> example(<span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myExample'</span>, myExample);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'example.prototype'</span>, example.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例的原型指向构造函数的prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'example.prototype === myExample.__proto__ :'</span>, example.prototype === myExample.__proto__);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例的constructor指向他的构造函数                                                                                                          </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myExample.constructor === example'</span>, myExample.constructor === example); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例的constructor 指向 他的构造函数prototype上的constructor                                                                                </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myExample.constructor === example.prototype.constructor'</span>, myExample.constructor === example.prototype.constructor); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类prototype上的构造函数 指向 的是 自身                                                                                                        </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'example.prototype.constructor === example'</span>, example.prototype.constructor === example); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="继承的类生成的实例"><a href="#继承的类生成的实例" class="headerlink" title="继承的类生成的实例"></a>继承的类生成的实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; example, calc &#125; <span class="keyword">from</span> <span class="string">'../../utils/class_example.js'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myClass = <span class="keyword">new</span> calc(<span class="number">10</span>, <span class="number">56</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myClass'</span>, myClass);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'myClass.__proto__ === calc.prototype'</span>, myClass.__proto__ === calc.prototype) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'calc.__proto__ === example.prototype'</span>, calc.__proto__ === example); <span class="comment">// true  类的继承， 它的原型指向继承的那个类，而非那个类的prototype</span></span><br><span class="line"></span><br><span class="line">&lt;h3&gt;<span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>3. 类上面的静态方法<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="keyword">import</span> &#123; calc &#125; <span class="keyword">from</span> <span class="string">'../../utils/class_example.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = calc.div(<span class="number">100</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num'</span>, num); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript模块化</title>
      <link href="/blog/2019/js/node/commonJS/"/>
      <url>/blog/2019/js/node/commonJS/</url>
      
        <content type="html"><![CDATA[<p>tips: js模块化发展历程<br><a id="more"></a></p><h3 id="commonJS模块"><a href="#commonJS模块" class="headerlink" title="commonJS模块"></a>commonJS模块</h3><blockquote><p>最早出现的javascript模块化规范</p></blockquote><h4 id="模块的引用"><a href="#模块的引用" class="headerlink" title="模块的引用"></a>模块的引用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>); </span><br><span class="line">math.add() <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h4 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h4><p>在node中，上下文提供了<code>exports</code>对象用于导出当前模块的方法或者变量，在模块中存在一个 <code>module</code>对象，代表模块自身，而<code>exports</code>是<code>module</code>的一个属性；<br>将方法挂载在exports对象上作为属性即可定义导出的方式；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line">exports.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> params = <span class="number">100</span></span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.title = <span class="string">'导出标题'</span></span><br></pre></td></tr></table></figure></p><h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>就是传递给require的参数，比如 <code>require(&#39;fs&#39;), require(&#39;./src/main.js)</code></p><ul><li><strong>使用CommonJS规范的js文件调用，是一个同步的过程, 本地读取require的js后，才进行后续操作</strong></li><li><strong>所以不适合在浏览器端执行</strong></li></ul><h3 id="node模块"><a href="#node模块" class="headerlink" title="node模块"></a>node模块</h3><p>node模块分两类 </p><ol><li>核心模块：<code>node</code>提供的模块； </li><li>文件模块： 用户编写的模块；<br>node模块加载过后，会进行缓存，二次加载会优先从缓存检查；</li></ol><hr><ul><li><code>node</code>查找文件会先在当前目录下查找 <code>package.json</code>, 通过<code>JSON.parse</code>来解析描述对象， 取出<code>main</code>属性指定的文件名进行定位， 如果没有<code>package.json</code>或者文件名错误，会默认<code>index</code>当做文件名；</li><li>exports对象是通过形参的方式传入的， 要想实现类型class的方式引入，使用如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  title: <span class="string">'迂回的方式导出'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><ol><li><p>安装方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g</span><br></pre></td></tr></table></figure></li><li><p>本地包安装方法<br>只需要为NPM指明package.json文件所在的位置即可；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;folder&gt;</span><br></pre></td></tr></table></figure></li><li><p>从非官方源安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install underscore --registry=http:<span class="comment">//taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>查找可require的包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure></li></ol><h3 id="前后端共用模块"><a href="#前后端共用模块" class="headerlink" title="前后端共用模块"></a>前后端共用模块</h3><h4 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h4><blockquote><p>AMD规范是CommonJS模块规范的一个延伸；<code>异步模块定义， 依赖前置， requirejs</code></p></blockquote><h5 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure><p>  id和dependencies为可填项，如果不设定id，加载这个模块时，就默认使用这个模块的文件命名，否则使用id。dependencies为当前这个模块会使用到的依赖。factory是必填项，为模块的主体内容。可以是函数，也可以是对象。如果是函数，只会被执行一次。如果是对象，则是这个模块的输出值。</p><h5 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([dependencies],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// require(['./index.js'],function()&#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>require()函数接收两个参数：</p><ol><li>第一个参数是一个数组，表示所依赖的模块<code>【要引用的模块的路径(不带.js后缀)】</code>。<ul><li>不做任何设置的默认情况下，模块的路经查找，是以当前的文件做基础</li><li>如果使用data-main属性， 模块路径查找，是以data-main指定的文件所在的路径为基础的</li><li>如果使用config方法配置了baseUrl,那么路径的查找将会以baseUrl配置的路径作为基础</li></ul></li><li>第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。</li></ol><p><code>重点：</code>require()函数在加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。</p><p><strong>使用例子</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  定义</span></span><br><span class="line">define(<span class="string">'sayname'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'Byron'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sayName: sayName</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'sayname'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$,my</span>)</span>&#123;</span><br><span class="line">　 my.sayName(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h4><p>定义方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defin(factory);</span><br></pre></td></tr></table></figure></p><p>在依赖部分，CMD支持动态引入;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块  myModule.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>)</span><br><span class="line">  $(<span class="string">'div'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  <span class="keyword">var</span> timeout=<span class="built_in">require</span>(<span class="string">'...'</span>)  <span class="comment">/*依赖文件所在路径*/</span></span><br><span class="line">  timeout.init()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">seajs.use([<span class="string">'myModule.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">my</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>CMD是需要用到什么，才require什么，属于懒执行。AMD对待依赖的态度是预执行。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件通信与生命周期执行顺序</title>
      <link href="/blog/2019/frame/vue/vue-components-life/"/>
      <url>/blog/2019/frame/vue/vue-components-life/</url>
      
        <content type="html"><![CDATA[<p>Vue父子组件嵌套如何传值，以及生命周期的执行顺序是如何的~<br><a id="more"></a></p><p><em>题外话： 最近变得懒惰了， 工作也不是特别忙，学习充电也没跟上，最近项目开发遇到了一些问题，记录总结下；</em></p><p>vue框架有个优点就是，可以将<code>.vue</code>文件直接用作组件去使用，</p><h4 id="v-bind-属性"><a href="#v-bind-属性" class="headerlink" title="v-bind 属性"></a><strong>v-bind</strong> 属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使    用：     <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:likes</span>=<span class="string">"42"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">简写方式：     <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:title</span>=<span class="string">"Mytitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">传入一个对象：  <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind</span>=<span class="string">"myObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span>  // myObject = &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="在子组件中加工或者修改props"><a href="#在子组件中加工或者修改props" class="headerlink" title="在子组件中加工或者修改props"></a>在子组件中加工或者修改props</h5><ol><li><p>props只是当做初始值， 在子组件中维护自己的状态，需要在组件的data中定义属性，并将props的值赋予即可；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'title'</span>],</span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        childTitle: <span class="keyword">this</span>.title</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>props值在使用前需要进行转换，这种情况一般定义一个计算属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'dataList'</span>],</span><br><span class="line">computed() &#123;</span><br><span class="line">    fileList() &#123;</span><br><span class="line">        <span class="keyword">return</span> dataList.map( <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.size * <span class="number">10</span></span><br><span class="line">        &#125; )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong> props传递数组、对象这种引用类型的数据时，改变其值将会影响父组件中的数据状态；</p><hr><h4 id="v-on-事件"><a href="#v-on-事件" class="headerlink" title="v-on 事件"></a><strong>v-on</strong> 事件</h4><h5 id="事件名使用格式"><a href="#事件名使用格式" class="headerlink" title="事件名使用格式"></a>事件名使用格式</h5><blockquote><p>事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。<br>    因此，事件名使用kebab-case格式，使用示例： <code>v-on=&quot;my-event&quot;</code> 或者 <code>@on-change=&quot;Event&quot;</code>。</p></blockquote><h5 id="父组件监听子组件事件"><a href="#父组件监听子组件事件" class="headerlink" title="父组件监听子组件事件"></a>父组件监听子组件事件</h5><blockquote><p>即  子组件<strong>主动</strong>将数据回传父组件 或者 改变父组件的状态</p></blockquote><ol><li><p>父组件中绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-components</span> @<span class="attr">on-confirm</span>=<span class="string">"getData"</span>&gt;</span> <span class="tag">&lt;/<span class="name">my-components</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javascript --&gt;</span></span><br><span class="line">methods: &#123;</span><br><span class="line">    getData(data) &#123;</span><br><span class="line">        // do something ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子组件使用自定义事件系统 $emit 触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'on-confirm'</span>, myData); <span class="comment">//触发事件，并将myData数据传递给父组件</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="父组件访问子组件方法、属性"><a href="#父组件访问子组件方法、属性" class="headerlink" title="父组件访问子组件方法、属性"></a>父组件访问子组件方法、属性</h5><blockquote><p>vue提供了访问组件实例的方法，可以通过实例读取子组件的实例上的方法和属性；</p></blockquote><p>父组件访问子组件属性或者方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs[<span class="string">'组件绑定的ref'</span>].title      <span class="comment">// 访问子组件data中的属性</span></span><br><span class="line"><span class="keyword">this</span>.$refs[<span class="string">'组件绑定的ref'</span>].queryList() <span class="comment">// 访问子组件中的方法</span></span><br></pre></td></tr></table></figure></p><p>调用子组件的方法时，我们可以巧妙的传递一个回调函数， 在子组件中将数据传回的父组件；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 父组件</span></span><br><span class="line">    <span class="keyword">this</span>.$refs[<span class="string">'组件绑定的ref'</span>].queryList( <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">    &#125;) </span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">queryList(callback) &#123;</span><br><span class="line">    <span class="keyword">let</span> mydata = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'object'</span>) &#123;</span><br><span class="line">        callback(mydata); <span class="comment">// 回传数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="v-if条件渲染"><a href="#v-if条件渲染" class="headerlink" title="v-if条件渲染"></a>v-if条件渲染</h4><blockquote><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p></blockquote><p>如果给DOM元素 或者 组件使用了v-if， 他们都会根据条件渲染，组件执行生命周期函数渲染；<br>v-if与v-show的区别是： </p><ul><li>v-if： 组件会根据v-if进行重建和销毁； 【有更高的切换开销】</li><li>v-show：第一次就会加载渲染DOM，值变化时，只是对CSS进行了变化；【有更高的初始渲染开销】</li></ul><p>如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><h4 id="父子组件生命周期执行顺序"><a href="#父子组件生命周期执行顺序" class="headerlink" title="父子组件生命周期执行顺序"></a>父子组件生命周期执行顺序</h4><p>首先 vue 中生命周期函数顺序是 <code>**created** -&gt; **mounted** -&gt; **destroyed**</code></p><p>抛出问题： 页面是有若干组件组成， 组件中可能会再用组件， 业务需求是父组件获取数据后， 传递给子组件， 子组件在接到数据后，渲染在页面， 或者通过接收到的数据在进行异步请求获取数据等，那么子组件在什么阶段才能获取到父组件传递过来的props值呢？</p><p>先来看下 父子组件的生命周期执行顺序&gt;<br><img src="/public_s/images/3793524098-5b665dbbde824_articlex.png" alt="图片"></p><p>一般情况下父组件都是在mounted时机进行异步请求,然后才能获取到数据，显然，当父组件mounted执行时， 子组件的生命周期都已经执行完了；如果子组件需要对数据进行加工、筛选的方法在什么时机去执行呢 ？</p><p><strong>解决方案：</strong></p><p><strong>方案一、</strong>根据什么周期执行顺序， 如果我们可以在父组件的created阶段获取到数据【已经获取到】，这样在子组件的生命周期中调用方法，可以正确拿到props数据<br><strong>方案二、</strong>给子组件添加 v-if=”false”，等父组件在获取到数据后，设置 v-if 为 true，这时候子组件才开始进行渲染加载， 生命周期执行是可以获取props数据，<br>        但是这样做的缺点是，异步数据获到之前，页面是空白的，因为子组件添加了 v-if=”false”, 不会渲染；<br><strong>方案三、</strong>子组件中使用watch来监听props的变化然后调用方法，当异步获取到数据后，watch会监听到props更新；目前该方法是比满足需求的；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    dataList: &#123;</span><br><span class="line">        handler(newVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.changeData();</span><br><span class="line">        &#125;,</span><br><span class="line">        immediate: <span class="literal">true</span> <span class="comment">// 若使用v-if，加载子组件，watch第一次是不会被触发的，所以开启immediate为 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css换行与不换行</title>
      <link href="/blog/2018/js/common/css%E6%8D%A2%E8%A1%8C%E4%B8%8E%E4%B8%8D%E6%8D%A2%E8%A1%8C/"/>
      <url>/blog/2018/js/common/css%E6%8D%A2%E8%A1%8C%E4%B8%8E%E4%B8%8D%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>摘要：css 实现换行与不换行</p><a id="more"></a><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a><strong>white-space</strong></h4><blockquote><p>其值：<em>normal|pre|nowrap|pre-wrap|pre-line|inherit</em>; 属性设置如何处理元素内的空白</p></blockquote><ul><li><code>normal</code> 默认,空白会被浏览器忽略。</li><li><code>pre</code> 空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签。</li><li><code>nowrap</code> 文本不会换行，文本会在在同一行上继续，直到遇到 br 标签为止。</li><li><code>pre-wrap</code> 保留空白符序列，但是正常地进行换行。</li><li><code>pre-line</code> 合并空白符序列，但是保留换行符。</li><li><code>inherit</code> 规定应该从父元素继承 white-space 属性的值。</li></ul><h4 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a><strong>word-wrap</strong></h4><blockquote><p><em>normal|break-word</em>; 用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</p></blockquote><ul><li><code>normal</code>: 只在允许的断字点换行(浏览器保持默认处理)</li><li><code>break-word</code>:在长单词或 URL 地址内部进行换行</li></ul><h4 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a><strong>word-break</strong></h4><blockquote><p><em>normal|break-all|keep-all</em>; 用来标明怎么样进行单词内的断句。</p></blockquote><ul><li><code>normal</code>：使用浏览器默认的换行规则。</li><li><code>break-all</code>:允许再单词内换行</li><li><code>keep-all</code>:只能在半角空格或连字符处换行</li></ul><h4 id="省略号显示超出文本"><a href="#省略号显示超出文本" class="headerlink" title="省略号显示超出文本"></a>省略号显示超出文本</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 160<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><hr><style>    .main_code {        width: 400px;        border: 2px solid lightgreen;        display: flex;        flex-direction: column;    }    .main_code .wrap-line {        display: flex;        margin-bottom: 5px;    }    .main_code .title {        width: 150px;        flex-shrink: 0;        text-align: right;        /* color: red; */    }    .main2 {        width: 400px;        border: 2px solid lightsalmon;        display: flex;        flex-direction: column;    }    .main2 .wrap-line {        display: flex;        margin-bottom: 5px;    }    .main2 .title {        width: 150px;        flex-shrink: 0;        text-align: right;        /* color: red; */    }    .main2 .a-content,    .main2 .d-content,    .main2 .b-content {        white-space: nowrap;    }    .main2 .aa-content {        white-space: nowrap;        overflow: hidden;        text-overflow: ellipsis;    }    .main3 {        margin-top: 5px;        width: 400px;        border: 3px solid rgb(235, 24, 154);        display: flex;        flex-direction: column;    }    .main3 .wrap-line {        display: flex;        margin-bottom: 5px;    }    .main3 .title {        width: 150px;        flex-shrink: 0;        text-align: right;        /* color: red; */    }    .main3 .c-content,    .main3 .e-content {        word-break: break-all;    }    .last-content li{        line-height: 2em;    }</style><div><br>    <strong>默认情况下</strong>：<br>    我们发现连续数字和连续字母不进行换行，而是会撑破盒子；<br>    <div class="main_code"><br>        <div class="wrap-line"><br>            <label class="title" for>默认情况【中文】：</label><br>            <div class="a-content"> 我是一段很长的 文字我是一段很长 的文字我是一段很长的文字</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" for>有空格的英文：</label><br>            <div class="b-content"> When did I say we could run through the rain and not get wet?</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" for>连续英文：</label><br>            <div class="b-content" style="color:red;"> WhendidIsaywecouldrunthroughtherainandnotgetwet?</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" for>有空格的数字：</label><br>            <div class="c-content">123456789456123 4567 8945612 345678 94123</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" for>连续数子：</label><br>            <div class="c-content" style="color:red;">1234567894561234567894561234567894123</div><br>        </div><br>    </div><br>    <strong>强制不换行方法：</strong><br>    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>    <div class="main2"><br>        <div class="wrap-line"><br>            <label class="title" style="color:blue;" for>中文：</label><br>            <div class="a-content">我是一段很长的 文字我是一段很长的文字我是一段很长的文字</div><br>        </div><br>        <div class="wrap-line" style="color:green;"><br>            <label class="title" for>中文：</label><br>            <div class="aa-content">我是一段很长的 文字我是一段很长的文字我是一段很长的文字</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" style="color:blue;" for>有空格的英文：</label><br>            <div class="b-content"> When did I say we could run through the rain and not get wet?</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" style="color:blue;" for>有空格的数字：</label><br>            <div class="d-content">123456789456123 4567 8945612 345678 94123</div><br>        </div><br>    </div><br>    <strong>强制换行方法：</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>    *注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。<br>    <div class="main3"><br>        <div class="wrap-line"><br>            <label class="title" for>连续英文：</label><br>            <div class="c-content"> WhendidIsaywecouldrunthroughtherainandnotgetwet?</div><br>        </div><br>        <div class="wrap-line"><br>            <label class="title" for>连续数子：</label><br>            <div class="e-content">1234567894561234567894561234567894123</div><br>        </div><br>    </div><br></div>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url收藏夹</title>
      <link href="/blog/2018/js/common/remberUrl/"/>
      <url>/blog/2018/js/common/remberUrl/</url>
      
        <content type="html"><![CDATA[<p>摘要: 记录一些学习、工具网站<br><a id="more"></a></p><ul><li><a href="https://tinypng.com/" target="_blank" rel="noopener">在线图片压缩网站</a></li><li><a href="http://17koa.com/koa-generator-examples/" target="_blank" rel="noopener">KOA小书</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发总结(二)</title>
      <link href="/blog/2018/js/we_chat/wechat-003/"/>
      <url>/blog/2018/js/we_chat/wechat-003/</url>
      
        <content type="html"><![CDATA[<p>内容：小程序转发、小程序组件使用<br><a id="more"></a></p><h3 id="小程序转发"><a href="#小程序转发" class="headerlink" title="小程序转发"></a>小程序转发</h3><p>微信小程序当页面js中有onShareAppMessage函数，右上角就会有转发按钮， 默认转发的当前页面；转发时的图片就是当前页面80%的高度；<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share.html" target="_blank" rel="noopener">官方API</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E9%A1%B5%E9%9D%A2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">onShareAppMessage</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户点击右上角分享</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params">ops</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (ops.from === <span class="string">'button'</span>) &#123;</span><br><span class="line">        <span class="comment">// button：页面内转发按钮；</span></span><br><span class="line">        <span class="comment">// menu：右上角转发菜单</span></span><br><span class="line">     <span class="built_in">console</span>.log(ops.target)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     title: <span class="string">'我的小程序'</span>,</span><br><span class="line">     path: <span class="string">'pages/index/index'</span>, <span class="comment">//转发链接打开的页面</span></span><br><span class="line">     imageUrl: <span class="string">'img/自定义图片路径'</span>, <span class="comment">//没有时使用当前页面内容</span></span><br><span class="line">       <span class="comment">// 转发成功</span></span><br><span class="line">     success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"转发成功:"</span> , res);</span><br><span class="line">     &#125;,</span><br><span class="line">       <span class="comment">// 转发失败</span></span><br><span class="line">     fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"转发失败:"</span> ,res);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>转发成功后，小程序会自动显示一个 tips  转发成功 ；</p></blockquote><h3 id="小程序组件使用"><a href="#小程序组件使用" class="headerlink" title="小程序组件使用"></a>小程序组件使用</h3><p>父页面使用组件， 传递两个属性， propMydata 、myTitle</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">prop-mydata</span>=<span class="string">"&#123;&#123;mydata&#125;&#125;"</span> <span class="attr">my-title</span>=<span class="string">"&#123;&#123;mytitle&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        mydata: [<span class="number">1</span>,<span class="number">2.3</span>,<span class="number">4</span>],</span><br><span class="line">        mytitle: <span class="string">'this is a props'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件页面接收props<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">prop-mydata</span>=<span class="string">"&#123;&#123;mydata&#125;&#125;"</span> <span class="attr">prop-title</span>=<span class="string">"&#123;&#123;mytitle&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    propMydata: &#123; <span class="comment">//props名字</span></span><br><span class="line">      type: <span class="built_in">Array</span>, <span class="comment">//类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span><br><span class="line">      <span class="comment">// value: &#123;&#125;, //属性初始值（可选），如果未指定则会根据类型选择一个</span></span><br><span class="line">      observer: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal, changedPath</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 属性被改变时执行的函数（可选），也可以写成在methods段中定义的方法名字符串, 如：'_propertyChange'</span></span><br><span class="line">        <span class="comment">// 通常 newVal 就是新设置的数据， oldVal 是旧数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    propTitle: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iview使用总结（二）</title>
      <link href="/blog/2018/frame/vue/vue-ivu-001/"/>
      <url>/blog/2018/frame/vue/vue-ivu-001/</url>
      
        <content type="html"><![CDATA[<p>摘要: iview表单校验、vue中实现hover效果、vue Render方法使用姿势<br><a id="more"></a></p><h3 id="iview表单校验"><a href="#iview表单校验" class="headerlink" title="iview表单校验"></a>iview表单校验</h3><p><strong>1. iview在校验select报错</strong><br> 问题：即使选择了某一项一直报错？;<br> 原因: iview默认校验数据类型为<strong>String</strong>, 而我们再给select的 :value是<code>number</code>类型的;<br><strong>解决方法:</strong> 加入 type: ‘number’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">industryType: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请选择"</span>, <span class="attr">trigger</span>: <span class="string">"change"</span>, <span class="attr">type</span>: <span class="string">'number'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>2. 多条件校验， 正则校验</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> contractPhone: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请输入联系电话"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'string'</span>,<span class="attr">pattern</span>: <span class="regexp">/^1\d&#123;10&#125;$/</span>, <span class="attr">message</span>: <span class="string">'联系电话格式有误'</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125; <span class="comment">// 使用正则表达式</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong>3.自定义方法校验</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">provinceArr: [</span><br><span class="line">    &#123;</span><br><span class="line">        validator: <span class="keyword">this</span>.proviinceValidate, <span class="comment">// 调用自定义方法 支持异步，比如查重</span></span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        trigger: <span class="string">"change"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">proviinceValidate(rule, value, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value) &amp;&amp; value.length === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(); <span class="comment">// 返回成功校验</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"地址不能为空"</span>)); <span class="comment">// 返回失败校验</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 校验日期，或者城市选择器</strong><br> 问题： iview默认校验的数据类型是 String，所以用默认校验，type是不符合的。<br> 解决： type：data<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">province:[</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'预送达时间不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'change'</span> ,<span class="attr">type</span>: <span class="string">'date'</span>&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><hr><h3 id="vue中实现hover效果"><a href="#vue中实现hover效果" class="headerlink" title="vue中实现hover效果"></a>vue中实现hover效果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"img-wrap-item"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mouseenter</span>=<span class="string">"showCloseIcon(item)"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">mouseleave</span>=<span class="string">"showCloseIcon(item)"</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="iview-select-remote模式下，无法清空搜索输入的内容"><a href="#iview-select-remote模式下，无法清空搜索输入的内容" class="headerlink" title="iview select  remote模式下，无法清空搜索输入的内容"></a>iview select  remote模式下，无法清空搜索输入的内容</h3><p>当使用remote模式下的select弹窗时， 关闭再显示，无法清空其内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"change-select"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"concatCustomer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">remote</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:remote-method</span>=<span class="string">"queryCustomerList"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"customer_loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">"请输入客户名称"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>解决方法： <code>document.querySelector(&#39;.change-select .ivu-select-input&#39;).value = &#39;&#39;</code></p><h3 id="vue-Render方法使用姿势"><a href="#vue-Render方法使用姿势" class="headerlink" title="vue Render方法使用姿势"></a>vue Render方法使用姿势</h3><blockquote><p><a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">官方使用文档</a><br>iview框架中使用render函数方法：<code>render:(h,params)=&gt;{}</code><br>render参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render:<span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">" 定义的元素 "</span>，&#123; 元素的性质 &#125;，<span class="string">" 元素的内容"</span>/[元素的内容])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>简单例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">'p'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            props: &#123; <span class="comment">// 组件peops</span></span><br><span class="line">            &#125;,</span><br><span class="line">            style: &#123; <span class="comment">// style样式属性</span></span><br><span class="line">                height: <span class="string">'60px'</span>,</span><br><span class="line">                border: <span class="string">"1px solid lightblue"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            domProps: &#123; <span class="comment">// dom原生属性</span></span><br><span class="line">                href: <span class="string">'javascript:void(0);'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            on: &#123; <span class="comment">// 绑定 vue事件</span></span><br><span class="line">            &#125;,</span><br><span class="line">            nativeOn: &#123; <span class="comment">// 绑定原生事件</span></span><br><span class="line">                click: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$Message.success(<span class="string">'点击事件成功啦'</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                keydown: <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'event.target.value'</span>, event.target.value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [h(<span class="string">'span'</span>, &#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                background: <span class="string">'lightgreen'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">55</span>),</span><br><span class="line">        [h(<span class="string">'a'</span>,&#123;</span><br><span class="line">            style: &#123;</span><br><span class="line">                border: <span class="string">'1px solid red'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">'我是a标签'</span>)]</span><br><span class="line">        ], )</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="完整iview表单校验、验证、清空方法"><a href="#完整iview表单校验、验证、清空方法" class="headerlink" title="完整iview表单校验、验证、清空方法"></a>完整iview表单校验、验证、清空方法</h3><p>html -&gt; template<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">:model</span>=<span class="string">"formItem"</span> <span class="attr">ref</span>=<span class="string">"formItem"</span> <span class="attr">:rules</span>=<span class="string">"formValidate"</span> <span class="attr">inline</span> <span class="attr">:label-width</span>=<span class="string">"84"</span>&gt;</span> <span class="comment">&lt;!-- label-width作用于 所有的子formitem  inline行内模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"联系电话"</span> <span class="attr">prop</span>=<span class="string">"contractPhone"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">"formItem.contractPhone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: 280px;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">"请输入联系电话"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"公司所在地"</span> <span class="attr">prop</span>=<span class="string">"provinceArr"</span>&gt;</span>  <span class="comment">&lt;!-- 此处需要用 prop 名字要与v-model的 一致 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Cascader</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">"formItem.provinceArr"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">"provinceList"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">trigger</span>=<span class="string">"hover"</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">Cascader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">"请选择"</span> <span class="attr">prop</span>=<span class="string">"select"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Select</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">"formItem.industryType"</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Option</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">"item in categoryList"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">"item.value"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:value</span>=<span class="string">"item.value"</span></span></span><br><span class="line"><span class="tag">            &gt;</span>&#123;&#123; item.label &#125;&#125;<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>data中的校验：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        formValidate: &#123;</span><br><span class="line">            <span class="comment">// 多重校验</span></span><br><span class="line">            contractPhone: [</span><br><span class="line">                &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请输入联系电话"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">pattern</span>: <span class="regexp">/^1\d&#123;10&#125;$/</span>, <span class="attr">message</span>: <span class="string">'联系电话格式有误'</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125; <span class="comment">// 使用正则表达式</span></span><br><span class="line">            ],</span><br><span class="line">            industryType: [</span><br><span class="line">                &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"请选择行业类别"</span>, <span class="attr">trigger</span>: <span class="string">"change"</span>,  <span class="attr">type</span>:<span class="string">'number'</span>&#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// 自定义校验  地址控件校验</span></span><br><span class="line">            provinceArr: [</span><br><span class="line">                &#123;</span><br><span class="line">                    validator: <span class="keyword">this</span>.proviinceValidate, <span class="comment">// 调用自定义方法 支持异步，比如查重</span></span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    trigger: <span class="string">"change"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">    <span class="comment">// 异步或者自定义校验方法</span></span><br><span class="line">    proviinceValidate(rule, value, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value) &amp;&amp; value.length === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"地址不能为空"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单提交 验证方法</span></span><br><span class="line">    submit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">'formItem'</span>].validate( <span class="keyword">async</span> (valid) =&gt; &#123;  <span class="comment">// 如果有await异步操作 需要async</span></span><br><span class="line">            <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                <span class="comment">// 校验通过</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 清空方法</span></span><br><span class="line">    clear() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">'formItem'</span>].resetFields()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序跳转总结</title>
      <link href="/blog/2018/js/we_chat/wechat-002/"/>
      <url>/blog/2018/js/we_chat/wechat-002/</url>
      
        <content type="html"><![CDATA[<p>简介: 总结微信小程序开发过程中如何正确使用跳转<br><a id="more"></a></p><h4 id="小程序跳转问题"><a href="#小程序跳转问题" class="headerlink" title="小程序跳转问题"></a>小程序跳转问题</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.navigateBack.html" target="_blank" rel="noopener">官方地址传送门</a></p><h5 id="wx-navigateBack"><a href="#wx-navigateBack" class="headerlink" title="wx.navigateBack"></a><code>wx.navigateBack</code></h5><blockquote><p>小程序返回上一页或者多级页面。可以使用 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack(&#123;</span><br><span class="line">  delta: <span class="number">2</span> <span class="comment">// 返回上一页 层级</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="wx-navigateTo-可以传参"><a href="#wx-navigateTo-可以传参" class="headerlink" title="wx.navigateTo() 可以传参"></a><code>wx.navigateTo()</code> 可以传参</h5><hr><blockquote><p>wx.navigateTo(OBJECT) 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面<br><strong>跳转的页面会自带返回按钮</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">'test?id=1'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad(option) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(option.query)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="wx-reLaunch-可以传递参数"><a href="#wx-reLaunch-可以传递参数" class="headerlink" title="wx.reLaunch()可以传递参数"></a><code>wx.reLaunch()</code>可以传递参数</h5><blockquote><p>关闭所有页面，打开到应用内的某个页面<br><strong>跳转的页面不会有返回按钮</strong></p></blockquote><h5 id="wx-switchTab-不能带参数"><a href="#wx-switchTab-不能带参数" class="headerlink" title="wx.switchTab()不能带参数"></a><code>wx.switchTab()</code>不能带参数</h5><blockquote><p>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面<br><strong>跳转的页面不会有返回按钮</strong></p></blockquote><h5 id="wx-redirectTo-可以传递参数"><a href="#wx-redirectTo-可以传递参数" class="headerlink" title="wx.redirectTo() 可以传递参数"></a><code>wx.redirectTo()</code> 可以传递参数</h5><blockquote><p>关闭当前页面，跳转到应用内的某个页面。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">    url: <span class="string">'test?id=1'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p><strong>案例问题？</strong></p><blockquote><p>页面A-【navigateTo】 -&gt; login页面-【navigateTo】 -&gt; 页面C（该页面需要登录，所以在A跳转的时候判断是否登录，如未登录跳转到登录页面）<br>开始时跳转都用的是 navigateTo, 在页面C中点击返回时，返回到了登录页，这显然是错误的，一直在想如何从C页面直接跳回A页面….</p></blockquote><p>解决方法： 在login页面使用 <code>wx.redirectTo</code></p><p>预期效果：A -&gt; login -&gt; C    然后  C直接返回A</p><p>A -&gt; login  通过 <code>wx.navigateTo</code> 跳转</p><p>login -&gt; C 通过 <code>wx.redirectTo</code> 跳转.跳转触发后 login 页面就会被销毁， C 页面再返回 <code>wx.navigateBack</code> 就会直接到 A 了</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018下半年学习资料整理&amp;学习计划[11]</title>
      <link href="/blog/2018/study/study2018-05/"/>
      <url>/blog/2018/study/study2018-05/</url>
      
        <content type="html"><![CDATA[<p>每天收集一点，每天学习一点</p><a id="more"></a><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ol><li><a href="http://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="noopener">深入理解javascript原型和闭包</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端储存的种类与方法</title>
      <link href="/blog/2018/js/common/webstorage/"/>
      <url>/blog/2018/js/common/webstorage/</url>
      
        <content type="html"><![CDATA[<p>摘要： localStorage、sessionStorage、cookie的用法以及区别<br><a id="more"></a></p><h3 id="localStorage的优势与用法"><a href="#localStorage的优势与用法" class="headerlink" title="localStorage的优势与用法"></a>localStorage的优势与用法</h3><ul><li>localStorage拓展了cookie的4K限制</li><li>localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却是只有在高版本的浏览器中才支持的;</li></ul><h4 id="localStorage的局限"><a href="#localStorage的局限" class="headerlink" title="localStorage的局限"></a>localStorage的局限</h4><p>1、浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性<br>2、目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换<br>3、localStorage在浏览器的隐私模式下面是不可读取的<br>4、localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡<br>5、localStorage不能被爬虫抓取到</p><pre><code>localStorage与sessionStorage的唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空</code></pre><h4 id="localStorage的写入方法"><a href="#localStorage的写入方法" class="headerlink" title="localStorage的写入方法"></a>localStorage的写入方法</h4><p>var storage = window.localStorage</p><ol><li>方法一： <pre><code>storage[&apos;name&apos;] = &apos;dale&apos; //写入name字段</code></pre></li><li>方法二： <pre><code>storage.info = &apos;this is a info&apos; // 写入info字段</code></pre></li><li>方法三： <pre><code>storage.setItem(&quot;age&quot;, 18) // 写入info字段</code></pre></li></ol><blockquote><p>localStorage的使用也是遵循同源策略的，所以不同的网站直接是不能共用相同的localStorage</p></blockquote><h4 id="localStorage的读取方法"><a href="#localStorage的读取方法" class="headerlink" title="localStorage的读取方法"></a>localStorage的读取方法</h4><ol><li>方法一:  <pre><code>var name = storage.name console.log(name); // &apos;dale&apos; </code></pre></li><li>方法二： <pre><code>var info = storage[&apos;info&apos;]console.log(info) // &apos;this is a info&apos;</code></pre></li><li>方法三： <pre><code>var age = storage.getItem(&apos;age&apos;)console.log(age) // &apos;18&apos; 注意这里输出的18是String类型的</code></pre></li></ol><blockquote><p>localStorage只支持string类型的存储。</p></blockquote><h4 id="localStorage的删除方法"><a href="#localStorage的删除方法" class="headerlink" title="localStorage的删除方法"></a>localStorage的删除方法</h4><blockquote><p>storage.removeItem(‘name’) // 删除key为name的键值</p></blockquote><h4 id="localStorage的清空方法"><a href="#localStorage的清空方法" class="headerlink" title="localStorage的清空方法"></a>localStorage的清空方法</h4><blockquote><p>storage.clear() //清除所有的storage</p></blockquote><h3 id="sessionStorage的用法"><a href="#sessionStorage的用法" class="headerlink" title="sessionStorage的用法"></a>sessionStorage的用法</h3><p><strong>sessionStorage的使用方法与localStorage完全相同，唯一的区别是：<code>sessionStorage当会话结束的时候，sessionStorage中的键值对会被清空</code></strong>;<br>详解： </p><ol><li>当 当前tab关闭，或者浏览器关闭；sessionStorage会被清空； </li><li>复制tab标签时，sessionStorage会被复制，</li><li>重新打开相同域名时tab时，sessionStorage是不会被共享的</li></ol><h3 id="cookie概念和使用方法"><a href="#cookie概念和使用方法" class="headerlink" title="cookie概念和使用方法"></a>cookie概念和使用方法</h3><h4 id="cookie的基本概念"><a href="#cookie的基本概念" class="headerlink" title="cookie的基本概念"></a>cookie的基本概念</h4><ul><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</li><li>cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</li><li>有效期设置：Max-Age</li><li>安全secure=true是只在ssl或者https安全协议下传输</li><li>HttpOnly=true时，禁止通过js脚本获取cookie；防止xss攻击</li><li>每个域名下的cookie 的大小最大为4KB，最多20个</li></ul><h4 id="cookie的使用"><a href="#cookie的使用" class="headerlink" title="cookie的使用"></a>cookie的使用</h4><h5 id="cookie的设置"><a href="#cookie的设置" class="headerlink" title="cookie的设置"></a>cookie的设置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cname,cvalue,exdays</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> SetTime = <span class="keyword">new</span> <span class="built_in">Date</span>();                                         <span class="comment">//设置过期时间</span></span><br><span class="line">    SetTime.setTime(SetTime.getTime()+(exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));        <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="keyword">var</span> expires = <span class="string">"expires="</span>+SetTime.toGMTString();                   <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = cname + <span class="string">"="</span> + cvalue + <span class="string">"; "</span> + expires;          <span class="comment">//创建一个cookie</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="cookie的读取"><a href="#cookie的读取" class="headerlink" title="cookie的读取"></a>cookie的读取</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span><br><span class="line"><span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span><br><span class="line">    &#123; </span><br><span class="line">    c_start=c_start + c_name.length+<span class="number">1</span> </span><br><span class="line">    c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span><br><span class="line">    <span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cookie的删除"><a href="#cookie的删除" class="headerlink" title="cookie的删除"></a>cookie的删除</h5><pre><code>将cookie的有效时间改成昨天。</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h4><blockquote><p>共同点：都是保存在浏览器端、且同源的</p></blockquote><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ol><li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li><li>localstorage在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在</li><li>cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在</li></ol><p>本文参考链接： <a href="https://juejin.im/post/5ad5b9116fb9a028e014fb19" target="_blank" rel="noopener">关于Cookie、session和Web Storage</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发采坑指南（一）</title>
      <link href="/blog/2018/js/we_chat/wechat-001/"/>
      <url>/blog/2018/js/we_chat/wechat-001/</url>
      
        <content type="html"><![CDATA[<p>tips: 小程序背景图使用、动态图片、触发事件， iconfont使用<br><a id="more"></a></p><h4 id="block标签"><a href="#block标签" class="headerlink" title="block标签"></a>block标签</h4><p><code>&lt;block/&gt;</code> 并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</p><blockquote><p>例如 wx:if  wx:for</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="小程序中的背景图片"><a href="#小程序中的背景图片" class="headerlink" title="小程序中的背景图片"></a>小程序中的背景图片</h4><h5 id="实现背景图的方法"><a href="#实现背景图的方法" class="headerlink" title="实现背景图的方法"></a>实现背景图的方法</h5><blockquote><p>tips： <code>background-image</code> 只能用网络url或者base64 . 本地图片要用<code>image</code>标签才行。</p></blockquote><p>可以通过image标签和其他元素层叠来实现背景图，使用 <code>position：absolute</code>定位层叠；</p><hr><h5 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h5><p>实现如图效果：<br><img src="/public_s/images/menu.saveimg.savepath20180920175019.jpg" alt="图片"><br>采用元素溢出，和<code>position:relative</code>定位来实现</p><p><strong> html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'wrap-center-line'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'line-bac'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">'line-bac-text'</span>&gt;</span>车次详情<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong> css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap-center-line</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40</span>rpx;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12</span>rpx <span class="number">32</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-center-line</span> <span class="selector-class">.line-bac</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2</span>rpx;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">2</span>rpx dashed <span class="number">#d9d9d9</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-center-line</span> <span class="selector-class">.line-bac-text</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">24</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#A6A6A6</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">24</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态图片显示"><a href="#动态图片显示" class="headerlink" title="动态图片显示"></a>动态图片显示</h5><p>动态改变图片，可以在url中使用双括号的方式来绑定数据</p><pre><code>&lt;image class=&quot;swiper-img&quot; mode=&apos;aspectFill&apos; src=&apos;../../assets/swiper/{{item}}&apos;&gt;&lt;/image&gt;</code></pre><h4 id="触发事件传值"><a href="#触发事件传值" class="headerlink" title="触发事件传值"></a>触发事件传值</h4><p>在view层绑定事件，将当前视图对应的数据传递到事件中去，方法如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtab</span>=<span class="string">"&#123;&#123; clickHandle &#125;&#125;"</span> <span class="attr">data-batchNumber</span>=<span class="string">'&#123;&#123;batchNumber&#125;&#125;'</span>&gt;</span> 点击按钮 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在js事件中接收时<code>data-batchNumber</code> N会默认转换成小写字母</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clickHandle: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//假定batchNumber的值是 P132456789</span></span><br><span class="line">    <span class="built_in">console</span>.log(event.currentTarget.dataset)</span><br><span class="line">    <span class="comment">// 输出的是 &#123; batchnumber: 'P123456789' &#125; 注意到： 其中的 n 是小写的</span></span><br><span class="line">    <span class="comment">// 应该如下方法获取</span></span><br><span class="line">    <span class="keyword">let</span> &#123; batchnumber &#125; = event.currentTarget.dataset</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小程序使用iconfont"><a href="#小程序使用iconfont" class="headerlink" title="小程序使用iconfont"></a>小程序使用iconfont</h4><p>小程序中使用iconfont其实和PC上一样，只需要将从iconfont上下载下来的 iconfont.css 文件的后缀修改成 iconfont.wxss</p><ul><li>将iconfont.wxss文件放在小程序根目录下，在 app.wxss 中引入<br> <code>@import &quot;icon-font.wxss&quot;;</code></li><li>页面使用：<br> <code>&lt;text class=&#39;iconfont icon-ic_dianhua&#39;&gt;&lt;/text&gt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九月读到的一些好文章</title>
      <link href="/blog/2018/study/september/"/>
      <url>/blog/2018/study/september/</url>
      
        <content type="html"><![CDATA[<p>tips: september<br><a id="more"></a></p><ol><li><a href="https://juejin.im/post/5b8ff8b3e51d450e5a73c033" target="_blank" rel="noopener">vue移动端适配 + mint-ui</a></li><li><a href="https://juejin.im/post/5b8d4171f265da436e74e5c1" target="_blank" rel="noopener">原生JS实现轮播图–第二章动画实现</a></li><li><a href="https://juejin.im/post/5b8b56e3f265da434c1f5f76" target="_blank" rel="noopener">vue与react的区别</a></li><li><a href="https://juejin.im/post/5b8905456fb9a01a105966b4" target="_blank" rel="noopener">彻底搞懂word-break、word-wrap、white-space</a></li></ol><h4 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h4><ol><li><a href="http://www.wangeditor.com/index.html" target="_blank" rel="noopener">wangEditor</a></li></ol><p>VUE</p><ol><li><a href="https://blog.souche.com/vuex-yuan-ma-jie-xi/" target="_blank" rel="noopener">vuex源码解读-大搜车</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dos下批处理命令bat</title>
      <link href="/blog/2018/others/bat001/"/>
      <url>/blog/2018/others/bat001/</url>
      
        <content type="html"><![CDATA[<p>tips: 一键操作的批处理命令，重复的事情交给电脑~~<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在我们开发过程中，经常会遇到切换环境，重启<code>nginx</code>，或者执行一系列的dos命令等，频繁的操作势必会很繁琐，浪费时间，作为一个程序员，重复的事情，当然要交给电脑了~</p></blockquote><p>首先了解一下什么是 .bat ？</p><p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理。批处理文件的扩展名为bat;</p><h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><h4 id="以一个简单的nginx启动、重启、停止说起："><a href="#以一个简单的nginx启动、重启、停止说起：" class="headerlink" title="以一个简单的nginx启动、重启、停止说起："></a>以一个简单的nginx启动、重启、停止说起：</h4><pre><code>1. 首先切换到nginx目录，包含nginx.exe目录；2. 按住shift，鼠标右键在此处打开powershell窗口；  </code></pre><p>  nginx一般的三个操作如下：</p><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>启动</td><td>start .\nginx.exe</td></tr><tr><td>重启</td><td>.\nginx.exe -s reload</td></tr><tr><td>停止</td><td>.\nginx.exe -s stop</td></tr></tbody></table><blockquote><p>注意：如果你不小心启动了多次，那么就会启动多个nginx进程，你用stop不能全部停止；可以用如下命令：<br>  <code>taskkill /fi &quot;imagename eq nginx.EXE&quot; /f</code> 杀掉所有的nginx进程；</p></blockquote><p>  接下来就展示如何使用bat批处理命令来做这个事情，先看下代码：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:entry</span><br><span class="line">cls</span><br><span class="line">echo nginx一键操作命令集合：</span><br><span class="line">echo ********************************</span><br><span class="line">echo   1. 开启nginx</span><br><span class="line">echo   2. 重启nginx</span><br><span class="line">echo   3. 停止nginx</span><br><span class="line">echo   4. 退出</span><br><span class="line">echo ********************************</span><br><span class="line">echo 请选择你要执行的操作...</span><br><span class="line">set /p userchoice=</span><br><span class="line">if "%userchoice%"=="1" goto startN</span><br><span class="line">if "%userchoice%"=="2" goto reloadN</span><br><span class="line">if "%userchoice%"=="3" goto stopN</span><br><span class="line">if "%userchoice%"=="4" goto quit</span><br><span class="line"></span><br><span class="line">:startN</span><br><span class="line">start .\nginx.exe</span><br><span class="line">goto succ</span><br><span class="line"></span><br><span class="line">:reloadN</span><br><span class="line">.\nginx.exe -s reload</span><br><span class="line">goto succ</span><br><span class="line"></span><br><span class="line">:stopN</span><br><span class="line">taskkill /fi "imagename eq nginx.EXE" /f</span><br><span class="line">goto succ</span><br><span class="line"></span><br><span class="line">:quit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">:succ</span><br><span class="line">echo 执行成功</span><br><span class="line">pause</span><br><span class="line">goto entry</span><br><span class="line"></span><br><span class="line">@echo on</span><br></pre></td></tr></table></figure></p><p> 首先在上面说到的nginx目录下，新建一个.bat文件<br>，将上述代码放进去就可以体会到一键操作了；</p><p>接下来大概说说代码<code>set /p userchoice=</code>，意思是设置一个变量userchoice，值为用户输入；<code>:startN :entry :succ</code>类似一个方法，判断用输入的值，执行对应的方法；批处理命令是一行一行的执行命令，执行完成后，就会关闭shell窗口，如果想保持可以使用 <code>pause</code> 会出现请按任意键继续…；如此就完成了一个一键操作的脚本，由于该文件放在nginx的安装目录，为了方便，可以右键，发送快捷模式到桌面；</p><h4 id="bat进阶-修改文件"><a href="#bat进阶-修改文件" class="headerlink" title="bat进阶-修改文件"></a>bat进阶-修改文件</h4><blockquote><p>由于目前本地的项目是用<code>nginx</code>启动访问，至于为什么，这里不解释，就是必须要用<code>nginx</code>，<code>nginx</code>里面的转发需要调用后台接口，而调用的环境经常变化，这样就需要先修改代理接口环境地址，然后重启<code>nginx</code>；</p></blockquote><p>现在我们的<code>bat</code>要执行修改文件，然后重启<code>nginx</code>操作，代码如下（仅供参考）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:entry</span><br><span class="line">cls</span><br><span class="line">echo *****系统一键切换环境*****</span><br><span class="line">echo ********************************</span><br><span class="line">echo  1. 开发dev01环境</span><br><span class="line">echo  2. 开发dev02环境</span><br><span class="line"></span><br><span class="line">echo  3. ---测试--01--环境</span><br><span class="line">echo  4. ---测试--02--环境</span><br><span class="line">echo ********************************</span><br><span class="line">echo 请选择你要切换环境...</span><br><span class="line">set /p userInput=</span><br><span class="line"></span><br><span class="line">if "%userInput%"=="1" goto dev01</span><br><span class="line">if "%userInput%"=="2" goto dev02</span><br><span class="line">if "%userInput%"=="3" goto test01</span><br><span class="line">if "%userInput%"=="4" goto test02</span><br><span class="line"></span><br><span class="line">:dev01</span><br><span class="line">set cc=proxy_pass http://ys.dev01.51ju.cn; #tag</span><br><span class="line">goto switch</span><br><span class="line"></span><br><span class="line">:dev02</span><br><span class="line">set cc=proxy_pass http://ys.dev02.51ju.cn; #tag</span><br><span class="line">goto switch</span><br><span class="line"></span><br><span class="line">:test01</span><br><span class="line">set cc=proxy_pass http://ys.test.51ju.cn; #tag</span><br><span class="line">goto switch</span><br><span class="line"></span><br><span class="line">:test02</span><br><span class="line">set cc=proxy_pass http://ys.test02.51ju.cn; #tag</span><br><span class="line">goto switch</span><br><span class="line"></span><br><span class="line">:switch</span><br><span class="line">echo 正在切换中...</span><br><span class="line">echo -------------------------</span><br><span class="line">(for /f "tokens=*" %%i in (a.conf) do echo %%i|findstr /ie tag&gt;nul&amp;&amp;echo %cc%||echo %%i)&gt;temp.ini</span><br><span class="line">move /y temp.ini a.conf</span><br><span class="line">echo -------------------------</span><br><span class="line">echo 已经切换至： %cc%</span><br><span class="line">echo -------------------------</span><br><span class="line">echo 开始重启nginx...</span><br><span class="line">cd ../../</span><br><span class="line">.\nginx.exe -s reload</span><br><span class="line">echo --------------------------</span><br><span class="line">echo nginx 重启成功~</span><br><span class="line">cd D:\nginx-1.13.12\conf\servers\</span><br><span class="line">echo --------------------------</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">goto entry</span><br><span class="line">@echo on</span><br></pre></td></tr></table></figure></p><p>大概原理同上，主要说明一下<code>for</code>循环这个语句，</p><ul><li>首先获取到<code>a.conf</code>,然后循环每一行代码，</li><li><code>%%i</code>相当于循环的当前行代码，</li><li><code>|findstr</code>是在当前行查找字符串，</li><li><code>/ie</code>忽略大小写和从行末开始查找；</li><li><code>tag&gt;nul</code>找到<code>&#39;tag&#39;</code>时，就把这一行清空：</li><li><code>echo %cc%</code>是将方法中设置的cc值复制到这一行；</li><li><code>move -y</code>就是移动文件到当前目录并取消重写文件发出的提示；</li></ul><p>注意： 默认配置中，需要修改的那一行命令需要添加一个标记tag。</p><p>以上就完成了对一个文件的修改；修改文件后，需要重启<code>nginx</code>，但是这个文件的目录和<code>nginx</code>不在同一个目录下，需要执行命令<code>cd ../../</code>跳转到nginx.exe的那个目录,执行nginx重启，由于切换命令要重复使用，当前目录已经修改了，所以需要再跳转回来<code>cd D:\nginx-1.13.12\conf\servers\</code>;</p><h4 id="娱乐一下"><a href="#娱乐一下" class="headerlink" title="娱乐一下"></a>娱乐一下</h4><p>相信看过科幻片的同学都知道，电脑大神或者黑客操作电脑时，不断的弹出<code>dos</code>窗口，然后绿色代码滚屏，其实很简单实现，原理如下：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 当前在<span class="keyword">call</span>目录下</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> "reload" <span class="built_in">cmd</span> /k</span><br><span class="line"><span class="built_in">cd</span> /d D:\test </span><br><span class="line"><span class="keyword">call</span> reload.bat </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> over...</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure></p><p>以上是在当前脚本中，新开<code>dos</code>窗口并调用其他目录下的脚本，如此循环重复，很简单的就实现不断开<code>dos</code>窗口了，至于滚屏，结合echo输出就可实现，<code>pause</code>命令是，代码执行到这一行时，提示请按任意键继续… 然后继续执行命令；</p><p>ps: 第一次捣鼓<code>bat</code>，如有错误，欢迎指出，共同进步；</p><hr><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/zhouzihan520xj/article/details/40301041" target="_blank" rel="noopener">批处理—findstr命令详解</a></li><li><a href="https://blog.csdn.net/jasonkent27/article/details/40394057" target="_blank" rel="noopener">DOS shell bat 输入输出变量</a></li><li><a href="https://blog.csdn.net/lewky_liu/article/details/78536439" target="_blank" rel="noopener">cmd - 如何在bat文件中调用另一个bat文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则基础属性手册</title>
      <link href="/blog/2018/js/common/regexp/"/>
      <url>/blog/2018/js/common/regexp/</url>
      
        <content type="html"><![CDATA[<p>摘要: 一堆的符号加字符数字是如何进行匹配的呢~~<br><a id="more"></a><br>本文同步于掘金平台 <a href="https://juejin.im/post/5d29727d518825187f2970e1" target="_blank" rel="noopener">https://juejin.im/post/5d29727d518825187f2970e1</a></p><blockquote><p>前端开发中，经常用到正则表达式来对表单或者一些数据进行校验，在此总结正则使用的基础知识，以及一些工作中常用的正则表达式·</p></blockquote><h3 id="正则基础知识"><a href="#正则基础知识" class="headerlink" title="正则基础知识"></a>正则基础知识</h3><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。</p><h4 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h4><ul><li><p>通过字面量创建</p><p><strong><code>var reg = /\bis\b/g</code> –&gt;正则表达式对象</strong></p><blockquote><p>/g表示全局匹配，否则只匹配第一个<br>/b单词边界，后面详细说明</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'this is a dog is!'</span></span><br><span class="line">str.replace(reg,<span class="string">'IS'</span>) <span class="comment">// 输出："this IS a dog Is!"</span></span><br></pre></td></tr></table></figure></li><li><p>通过构造函数创建</p><p><strong><code>var reg = new RegExp(/\bis\b/g)</code> –&gt;正则表达式对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'this is a regexp'</span></span><br><span class="line">reg.test(str) <span class="comment">// 返回true，字符串中包含 is</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><table><thead><tr><th>@</th><th>@</th><th>@</th></tr></thead><tbody><tr><td>g</td><td>global</td><td>全文进行搜索匹配； 默认false，匹配到第一个时停止</td></tr><tr><td>i</td><td>ignoreCass</td><td>忽略大小写，默认false，对大小写敏感</td></tr><tr><td>m</td><td>multiline</td><td>默认false，多行搜索</td></tr><tr><td>lastIndex</td><td>-</td><td>是当前匹配内容的的最后一个字符的下一个位置</td></tr><tr><td>source</td><td>-</td><td>正则表达式的文本字符串</td></tr></tbody></table><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>@</th><th>@</th></tr></thead><tbody><tr><td><strong>\t</strong></td><td>水平制表符table</td></tr><tr><td><strong>\v</strong></td><td>垂直制表符</td></tr><tr><td><strong>\n</strong></td><td>换行符</td></tr><tr><td><strong>\r</strong></td><td>回车符</td></tr><tr><td><strong>\0</strong></td><td>空字符</td></tr><tr><td><strong>\f</strong></td><td>换页符</td></tr><tr><td><strong>\cX</strong></td><td>ctrl +x</td></tr></tbody></table><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><table><thead><tr><th>@</th><th>@</th></tr></thead><tbody><tr><td>[]</td><td>元字符，来构建一个简单得类</td></tr><tr><td>[abc]</td><td>字符只能包含abc中的一种或者多种</td></tr><tr><td>^abc</td><td>字符类取反,非a或b或c的内容</td></tr></tbody></table><h4 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h4><table><thead><tr><th>@</th><th>@</th></tr></thead><tbody><tr><td>[0-9]</td><td>匹配1=0到9的数字</td></tr><tr><td>[a-zA-Z]</td><td>匹配大小写字母</td></tr><tr><td>[a-zA-Z-]</td><td>匹配大小写字母与-</td></tr></tbody></table><h4 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h4><table><thead><tr><th>@</th><th>@</th><th>@</th></tr></thead><tbody><tr><td>.</td><td>[^\r\n]</td><td>除了回车符和换行符之外的所有字符</td></tr><tr><td>\d</td><td>[[0-9]</td><td>数字字符</td></tr><tr><td>\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\s</td><td>[\t\n\x0B\f\r]</td><td>空白符</td></tr><tr><td>\S</td><td>[^\t\n\x0B\f\r]</td><td>非空白符</td></tr><tr><td>\w</td><td>[a-zA-Z_0-9]</td><td>单词字符(字母、数字下划线)</td></tr><tr><td>\W</td><td>[^a-zA-Z_0-9]</td><td>非单词字符</td></tr></tbody></table><h4 id="边界字符"><a href="#边界字符" class="headerlink" title="边界字符"></a>边界字符</h4><table><thead><tr><th>@</th><th>@</th></tr></thead><tbody><tr><td>^</td><td>以xxx开始</td></tr><tr><td>$</td><td>以xxx结束</td></tr><tr><td>\b</td><td>单词边界</td></tr><tr><td>\B</td><td>非单词边界</td></tr></tbody></table><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><table><thead><tr><th>@</th><th>@</th></tr></thead><tbody><tr><td><strong>?</strong></td><td>出现0次或一次 (最多出现一次)</td></tr><tr><td><strong>+</strong></td><td>出现一次或者多次(至少一次)</td></tr><tr><td><strong>*</strong></td><td>出现0次或者多次(任意次)</td></tr><tr><td>{n}</td><td>出现n次</td></tr><tr><td>{n,m}</td><td>出现n到m次</td></tr><tr><td>{n,}</td><td>至少出现n次</td></tr></tbody></table><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123456789'</span></span><br><span class="line">str.replace(<span class="regexp">/\d&#123;2,8&#125;/</span>,<span class="string">'X'</span>) <span class="comment">// 输出 X9</span></span><br><span class="line"><span class="comment">// 按照最大的匹配，尽可能多的匹配</span></span><br></pre></td></tr></table></figure><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><blockquote><p>在量词后面加上 ?</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'12345678'</span></span><br><span class="line">str.replace(<span class="regexp">/\d&#123;3,6&#125;?/</span>,<span class="string">'X'</span>) <span class="comment">// 输出 XX78</span></span><br><span class="line"><span class="comment">// 尝试最小可能123、456的匹配</span></span><br></pre></td></tr></table></figure><h4 id="分组-捕获"><a href="#分组-捕获" class="headerlink" title="分组 捕获"></a>分组 捕获</h4><p><code>(x)</code> 分组  – 捕获括号<br>匹配到字符串后会记住字符串，替换环节可以用 <code>$1 $2 ... $n</code>方法使用；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'2018-09-01'</span></span><br><span class="line">str.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/g</span>,<span class="string">'$3-$2-$1'</span>)</span><br><span class="line"><span class="comment">//输出： '01-09-2018'</span></span><br></pre></td></tr></table></figure></p><p><code>(?:x)</code> 非捕获分组<br>匹配X，但是不记住X， 使得能够定义为与正则表达式运算符一起使用的子表达式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:foo)&#123;1,2&#125;/</span></span><br><span class="line"><span class="comment">// 如果表达式是 /foo&#123;1,2&#125;/，&#123;1,2&#125;将只对 ‘foo’ 的最后一个字符 ’o‘ 生效。如果使用非捕获括号，则&#123;1,2&#125;会匹配整个 ‘foo’ 单词。</span></span><br></pre></td></tr></table></figure></p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p><code>|</code>  或<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'green Apple and red Apple'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/green|red/g</span>;</span><br><span class="line">str.replace(reg, <span class="string">'yellow'</span>);</span><br><span class="line"><span class="comment">// "yellow Apple and yellow Apple"</span></span><br></pre></td></tr></table></figure></p><h4 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h4><blockquote><p>前瞻: 就是在正则表达式匹配到规则的时候，向前检查是否符合断言，<br>后顾、后瞻方向相反—js不支持后顾</p></blockquote><p>reg匹配后，检查assert是否符合<br>正向前瞻      <code>reg(?=assert)</code>      符合断言<br>负向前瞻       <code>reg(?!assert)</code>   不符合这个断言<br><strong>example1:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a2*3'</span></span><br><span class="line">str.replace(<span class="regexp">/\w(?=\d)/g</span>,<span class="string">'X'</span>)</span><br><span class="line"><span class="comment">// 输出：'X2*3'</span></span><br><span class="line"><span class="comment">// 匹配单词字符并且后面是数字</span></span><br></pre></td></tr></table></figure></p><p><strong>example2:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello, Hi, I am Hilary.'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/H(?=i)/g</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(reg, <span class="string">"T"</span>);</span><br><span class="line"><span class="comment">//输出： Hello, Ti, I am Tilary.</span></span><br></pre></td></tr></table></figure></p><h3 id="一个强大的正则可视化工具"><a href="#一个强大的正则可视化工具" class="headerlink" title="一个强大的正则可视化工具"></a>一个强大的正则可视化工具</h3><p>工具传送门： <a href="https://regexper.com/" target="_blank" rel="noopener">RegExper</a><br>效果如下：<br><img src="/public_s/images/regexper.png" alt="regexper"><br>这样的正则表达式是不是清晰多了~~~ </p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>正则表达式基础属性大概就这多了，下一节将继续分析正则表达式的对象属性~~</p><hr><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>关于正则表达式<code>\1 \2</code>之类的问题</p><ol><li><p>第一个</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">RegExp</span> = <span class="regexp">/^(123)(456)\2\1$/</span>;</span><br><span class="line"><span class="comment">// 匹配的字符串是 123456456123</span></span><br></pre></td></tr></table></figure></li><li><p>第二正则表达式</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RegExp1 = <span class="regexp">/^(123)(456)\1$/</span>;</span><br><span class="line"><span class="comment">// 匹配到的字符串是 123456123</span></span><br></pre></td></tr></table></figure></li><li><p>第三正则表达式</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> RegExp1 = <span class="regexp">/^(123)(456)\2$/</span>;</span><br><span class="line"><span class="comment">// 匹配到的字符串是 123456456</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这个\1  \2……  都要和正则表达式集合()一起使用</p></blockquote><p>简单的说就是   </p><ul><li>\1表示重复正则第一个圆括号内匹配到的内容    </li><li>\2表示重复正则第二个圆括号内匹配到的内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端联调工具之-Fiddler</title>
      <link href="/blog/2018/js/common/fiddle001/"/>
      <url>/blog/2018/js/common/fiddle001/</url>
      
        <content type="html"><![CDATA[<p>tips: 开发必备调试工具-fiddler</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>现在的大型项目基本前后端分离；前端不仅仅只是负责界面，交互了；需要做的工作越来越多，但是都离不开和各个部门的沟通协作，这样才能高效率；最为密切的就是后端了，今天就简单的分享下在项目实战过程中用到的利器–<code>fiddle</code>工具；</p></blockquote><p>不就是 fiddle 嘛，抓包工具嘛，NO,NO,NO……</p><p>Fiddler 是最强大最好用的 Web 调试工具之一，它能记录所有客户端和服务器的 http 和 https 请求，允许你监视，设置断点，甚至修改输入输出数据，Fiddler 包含了一个强大的基于事件脚本的子系统，并且能使用.net 语言进行扩展</p><p>你对 HTTP 协议越了解， 你就能越掌握 Fiddler 的使用方法. 你越使用 Fiddler,就越能帮助你了解 HTTP 协议.</p><hr><h3 id="轻描淡写-介绍下-fiddle"><a href="#轻描淡写-介绍下-fiddle" class="headerlink" title="轻描淡写-介绍下 fiddle"></a>轻描淡写-介绍下 fiddle</h3><p>先贴一个官网地址：<a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">fiddle 官网</a><br>至于怎么形容他： <strong>The free web debugging proxy for any browser, system or platform</strong><br>抓包、调试、代理、各种很强大的功能</p><ol><li>不费话了，开始干活<br>下载，一路 next 就可以安装好；ok，将看到这个界面</li></ol><p><img src="/public_s/images/fiddler/fiddler1.webp" alt="图片"><br>左边列表就是捕获到的所有请求，不妨随便百度一下，就能看到你百度的请求；</p><blockquote><p>这个是我点击百度搜索框，触发的请求，右边<code>webform</code>中可以看到这个请求的内容，下边的<code>JSON</code>是服务器返回的内容；很清晰，一目了然。</p></blockquote><p>fiddler 工具的基本使用可以参考官网文档或者慕课网有视频教程；</p><h3 id="fiddler-的厉害之处"><a href="#fiddler-的厉害之处" class="headerlink" title="fiddler 的厉害之处"></a>fiddler 的厉害之处</h3><h4 id="To-测试妹子"><a href="#To-测试妹子" class="headerlink" title="To 测试妹子"></a>To 测试妹子</h4><p>对于测试来说，如上所示，分析请求，定位是前端还是后端的问题，检验界面与数据是否一致，有时候出现神奇问题，要么是逻辑问题，要么是界面和数据不一致造成的，精准定位问题，精准发锅；</p><h4 id="To-大前端"><a href="#To-大前端" class="headerlink" title="To 大前端"></a>To 大前端</h4><p>fiddler 不只是具有简单的抓包功能，在他的社区有很多的插件，使他的能力发挥到极致；<br>详细介绍下项目中常常使用的一个神器 <strong>Willow</strong><code>--Fiddler的插件，提供重定向和host主机等功能</code>,三秒钟解决联调、跨域问题，没错就是三秒.<br>贴一个下载地址：<br><a href="链接：http://pan.baidu.com/s/1boJxtqn">fiddler2 + willow 下载</a> 密码：o3lg<br><a href="链接：http://pan.baidu.com/s/1hsaihog">fiddler4 + willow 下载</a> 密码：kf8p<br>安装<code>fiddler</code>后安装插件 <code>willow</code>,willow 如果安装失败，请尝试右键使用 管理员身份打开；安装好后会在右边看到一个绿色的小图标，ok，点击他；</p><p><img src="/public_s/images/fiddler/fiddler2.webp" alt="图片"></p><p>核心内容</p><hr><p><strong>问题现状：</strong><br>我们的项目通常开发时都跑在本地服务下，一般是<code>127.0.0.1:8080</code>,如果我们希望本地代码的服务能够正常访问后端，或者访问到测试机的真实数据，这就跨域了，因为本地和后端或者测试的都不在一个域名下，是无法访问到数据的，通常的做法是启动一个 Nginx 服务来进行转发，这一个过程很麻烦，配置改来改去，而且如果要做到，代码修改实时看到效果，那就更复杂了。。。</p><p><strong>解决方案： </strong><br>我的做法是： 将本地服务<code>127.0.0.1</code>代理到某个域名比如<code>www.cloud.com</code>,这时候访问这个域名就能看到自己的项目了，这个域名下也是木有后端或者测试机的接口的，怎么办了，继续代理转发，将域名下所有的接口代理到真实的 IP 下，比如后端或者测试机接口的服务在 <code>10.50.12.24:8088</code>下，那我们就将<code>www.cloud.com/order</code>[order 是后端接口固定的项目名，每个接口都在这个目录下]指向<code>10.50.12.24:8088</code>下，完美解决；</p><p><img src="/public_s/images/fiddler/fiddler3.webp" alt="图片"></p><p>顺着这个思路 3 步解决，</p><ol><li>在 willow 中添加项目<code>快捷键ctrl+p</code>；</li><li>添加 host 代理<code>ctrl + o</code>;</li><li>添加指向 add exten <code>ctrl + n</code>;<br>不懂的童鞋看图</li></ol><p>图一：<img src="/public_s/images/fiddler/fiddler4.webp" alt="图片"><br>图二：<img src="/public_s/images/fiddler/fiddler5.webp" alt="图片"><br>好了可以开心的联调代码了；<br>ps： 这个 checkbox 框框表示是否启用，如果想去掉，点掉就好了；比手动去修改 host 方便多了；</p><h4 id="To-后端"><a href="#To-后端" class="headerlink" title="To 后端"></a>To 后端</h4><p>后端大侠有时候想这么干，用测试机的前端代码，来访问自己本地的服务，这样就不用浪费前端童鞋的资源了，测试机上自己测试；<br>这个步奏其实就是上面的逆过程，简单多了，测试机的前端代码自然指向测试机的后端代码，使用上面思路的第三步；添加指向，指向本机，这里要注意两个点：</p><ol><li>直接代理接口<code>www.cloud.com/order</code> –&gt; 本地服务+端口</li><li>如果是 https 的，需要后端给 tomcat 配置 https 证书</li></ol><p>介绍就先到这里了，更多使用技巧，后续在更新。。。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>后端某个功能 bug，不断地让前端点击按钮发请求，他来打断点，有时候我比较懒，就让后端自己点，后端如何访问前端开发机电脑上的代码，来访问自己电脑上的后端服务？<br>这个问题大家可以思考下，下期分享。。。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue原理学习笔记（一）</title>
      <link href="/blog/2018/js/common/vuestudy01/"/>
      <url>/blog/2018/js/common/vuestudy01/</url>
      
        <content type="html"><![CDATA[<p>Vue响应式原理-将date数据变成可观察的（observable）<br><a id="more"></a></p><blockquote><p>学习笔记-</p></blockquote><p>第一步、将date数据变成可观察的（observable）;</p><p>怎么实现了，主要是利用的对象的 defineProperty属性！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历对象，将对象的每个属性变成可观察的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        defineReactive(data, key, data[key], callback)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, data[key], callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">//属性的可枚举性，for in是否能够遍历到</span></span><br><span class="line">        configurable: <span class="literal">true</span>, <span class="comment">// 表示能否通过delete删除属性从而重新定义属性</span></span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="comment">// 第一次执行`render`的时候进行收集，详见下一章</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">            callback() <span class="comment">//回调执行render刷新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">calss Vue &#123;</span><br><span class="line">    <span class="comment">// 创建vue实例时将options中data指向了vue的实例， 即在VM实例上挂在了一个 `_data`属性;</span></span><br><span class="line">    <span class="comment">// 初始化调用了observe</span></span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>._data = options.data; <span class="comment">// this指向实例</span></span><br><span class="line">        observe(<span class="keyword">this</span>._data, options.render)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        text1: <span class="string">'1'</span>,</span><br><span class="line">        text2: <span class="string">'2'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的方法就简单的实现了将vue里面的data数据变成可观察的模式；如果改变了data里面属性的值就会触发对象的set， 从而触发订阅者的回调函数（如刷新视图）</p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识地图</title>
      <link href="/blog/2018/study/fontknownageMap/"/>
      <url>/blog/2018/study/fontknownageMap/</url>
      
        <content type="html"><![CDATA[<p>分类整理前端开发的一些知识点</p><a id="more"></a><h4 id="浏览器缓存（http缓存）"><a href="#浏览器缓存（http缓存）" class="headerlink" title="浏览器缓存（http缓存）"></a>浏览器缓存（http缓存）</h4><ol><li><a href="https://juejin.im/post/5b3c87386fb9a04f9a5cb037" target="_blank" rel="noopener">面试精选之http缓存</a></li><li><a href="https://juejin.im/post/5a4c3dec51882512b7300b69" target="_blank" rel="noopener">这一次,让我们再深入一点 - HTTP概述</a></li><li><a href="https://juejin.im/post/5872309261ff4b005c4580d4" target="_blank" rel="noopener">面试 – 网络 HTTP</a></li></ol><h4 id="网站性能优化"><a href="#网站性能优化" class="headerlink" title="网站性能优化"></a>网站性能优化</h4><ol><li><a href="https://juejin.im/post/5a6941e1f265da3e33048429" target="_blank" rel="noopener">web前端性能优化-3方面</a></li><li><a href="https://www.jianshu.com/p/5e837e646c2f" target="_blank" rel="noopener">网站性能优化实践总结</a></li></ol><h4 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h4><ol><li><a href="https://juejin.im/post/5af918636fb9a07ac5603ecb" target="_blank" rel="noopener">移动端常见bug汇总001</a></li><li><a href="https://juejin.im/post/5aca0c1b6fb9a028d208377e" target="_blank" rel="noopener">touchstart与click不得不说的故事</a></li><li><a href="https://juejin.im/post/5abf1c69f265da239706fcb8" target="_blank" rel="noopener">移动端滚动穿透解决方案</a></li><li><a href="https://yezihaohao.github.io/2018/03/30/H5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" target="_blank" rel="noopener">H5手机端开发问题汇总及解决方案</a></li></ol><h4 id="VUE专场"><a href="#VUE专场" class="headerlink" title="VUE专场"></a>VUE专场</h4><ol><li><a href="http://web.jobbole.com/95195/" target="_blank" rel="noopener">Vue 面试中常问知识点整理</a></li><li><a href="http://web.jobbole.com/95197/" target="_blank" rel="noopener">JavaScript之实现一个简单的Vue</a></li><li><a href="https://juejin.im/post/5b8b56e3f265da434c1f5f76" target="_blank" rel="noopener">vue与react的区别</a></li><li><p><a href="https://juejin.im/post/5b174de8f265da6e410e0b4e" target="_blank" rel="noopener">Vue 项目里戳中你痛点的问题及解决办法</a></p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4></li><li><p><a href="http://web.jobbole.com/95198/" target="_blank" rel="noopener">Promise实现原理（附源码）</a></p></li><li><a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">Promise 迷你书</a></li><li><a href="https://cnodejs.org/topic/569c8226adf526da2aeb23fd" target="_blank" rel="noopener">理解 Promise 的工作原理</a></li><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de" target="_blank" rel="noopener">Node.js最新技术栈之Promise篇</a></li></ol><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ol><li><a href="https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/" target="_blank" rel="noopener">通过示例来学习ES2016, 2017, 2018的新特性</a></li></ol><h4 id="webpack学习"><a href="#webpack学习" class="headerlink" title="webpack学习"></a>webpack学习</h4><ol><li><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">webpack小书</a></li><li><a href="https://fakefish.github.io/react-webpack-cookbook/index.html" target="_blank" rel="noopener">webpack【gitbook】</a></li></ol><h4 id="面试经验"><a href="#面试经验" class="headerlink" title="面试经验"></a>面试经验</h4><ul><li>. <a href="https://juejin.im/post/5b44a485e51d4519945fb6b7" target="_blank" rel="noopener">总结了17年初到18年初百场前端面试的面试经验-含答案</a></li></ul><ol><li><a href="https://juejin.im/post/5aa5cb846fb9a028e25d2fb1" target="_blank" rel="noopener">从输入URL到页面加载的过程</a></li><li><a href="https://juejin.im/entry/57b68b8b0a2b58005c8270eb" target="_blank" rel="noopener">一些基础的前端技术面试问题</a></li><li><a href="https://juejin.im/post/5b1666fde51d4506bb3a6513" target="_blank" rel="noopener">2017年前端面试题整理汇总100题</a></li><li><a href="https://juejin.im/entry/56f06612731956005d3b6795" target="_blank" rel="noopener">最全前端开发面试问题及答案整理</a></li><li><a href="https://juejin.im/entry/5b121499f265da6e225cdded" target="_blank" rel="noopener">缓存详解</a></li><li><a href="https://juejin.im/entry/5b02336a51882542682e80c0" target="_blank" rel="noopener">雅虎前端优化的35条军规 - 咸鱼老弟 - 博客园</a></li><li><p><a href="https://juejin.im/post/5b4d543ce51d4519610dea67" target="_blank" rel="noopener">记一次凉凉的小米面试</a></p></li><li><p><a href="https://juejin.im/post/5b4a9136f265da0f990d49cb" target="_blank" rel="noopener">近百高频知识点，十万余字，地表最强前端面试图谱了解下</a></p></li><li><a href="http://web.jobbole.com/94928/" target="_blank" rel="noopener">不要再问我跨域的问题了</a></li><li><a href></a></li><li><a href></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018上半年学习资料整理&amp;学习计划[7]</title>
      <link href="/blog/2018/study/study2014-07/"/>
      <url>/blog/2018/study/study2014-07/</url>
      
        <content type="html"><![CDATA[<p>七月</p><a id="more"></a><h4 id="学习博客"><a href="#学习博客" class="headerlink" title="学习博客"></a>学习博客</h4><ol><li><a href="https://xiaowangmm2.github.io/" target="_blank" rel="noopener">王海燕的博客</a></li></ol><h4 id="vue学习"><a href="#vue学习" class="headerlink" title="vue学习"></a>vue学习</h4><ol><li><a href="http://www.imooc.com/t/3017249#Course" target="_blank" rel="noopener">滴滴前端学习课程</a></li><li><a href="https://github.com/DDFE/DDFE-blog/issues/8" target="_blank" rel="noopener">vue2.0源码学习</a></li></ol><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><ol><li><a href="https://tool.lu/" target="_blank" rel="noopener">在线工具</a></li></ol><h4 id="掘金2018上半年整理"><a href="#掘金2018上半年整理" class="headerlink" title="掘金2018上半年整理"></a>掘金2018上半年整理</h4><ol><li><a href="https://juejin.im/post/5b3adfe2e51d4555b17e85df" target="_blank" rel="noopener">2018上半年掘金微信群日报优质文章合集：前端篇</a></li></ol><h4 id="Nginx跨域配置"><a href="#Nginx跨域配置" class="headerlink" title="Nginx跨域配置"></a>Nginx跨域配置</h4><ol><li><a href="http://www.yunweipai.com/archives/9381.html" target="_blank" rel="noopener">Nginx通过CORS实现跨域</a></li></ol><h4 id="vue的坑"><a href="#vue的坑" class="headerlink" title="vue的坑"></a>vue的坑</h4><ol><li><a href="https://juejin.im/post/5b174de8f265da6e410e0b4e" target="_blank" rel="noopener">Vue 项目里戳中你痛点的问题及解决办法</a></li></ol><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ol><li><a href="https://juejin.im/post/5b481d216fb9a04fdb16a88f" target="_blank" rel="noopener">一个json帮你完成分享朋友圈图片</a></li></ol><p>#### </p><ol><li><a href="https://blog.fundebug.com/2018/07/17/new_in_es16_17_18/" target="_blank" rel="noopener">通过示例来学习ES2016, 2017, 2018的新特性</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非大型网站的SEO优化之路</title>
      <link href="/blog/2018/others/seo/"/>
      <url>/blog/2018/others/seo/</url>
      
        <content type="html"><![CDATA[<p>网站常用的SEO优化方式</p><a id="more"></a><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ol><li>SEO 搜索引擎优化 免费</li><li>SEM 搜索引擎营销 收费</li></ol><h4 id="SEO排名机制"><a href="#SEO排名机制" class="headerlink" title="SEO排名机制"></a>SEO排名机制</h4><ol><li>搜索引擎蜘蛛</li><li>权重</li></ol><hr><h3 id="权重提升"><a href="#权重提升" class="headerlink" title="权重提升"></a>权重提升</h3><h4 id="SEO优化重要的三要素"><a href="#SEO优化重要的三要素" class="headerlink" title="SEO优化重要的三要素"></a>SEO优化重要的三要素</h4><ol><li>标题</li><li>关键词   </li><li>描述</li></ol><h4 id="外链-gt-分类抓取进入数据库"><a href="#外链-gt-分类抓取进入数据库" class="headerlink" title="外链  -&gt; 分类抓取进入数据库"></a>外链  -&gt; 分类抓取进入数据库</h4><ol><li>外链 - 网站于网站之间的连接向导–通过链接去抓取</li><li>互联网是链接与链接实现的一条网络</li><li>与内容相近的网站交换</li><li>其他形式的交换， 例如-灌水式外链【在论坛，贴吧发布链接~】</li></ol><h4 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h4><ol><li>页面链接 【文章关键字链接】– 蜘蛛顺着链接爬来爬去抓取</li><li>优化本站质量、提高流量</li></ol><h4 id="内容质量"><a href="#内容质量" class="headerlink" title="内容质量"></a>内容质量</h4><ol><li>质量高能够提升权重</li><li>更新内容，增加匹配度-保持权重</li><li>原创 【抄袭， 洗稿子， 不长久，搜索引擎算法更新】</li><li>关键词密度 【2% – 8%】 【ps：一篇文章内的关键词链接】</li></ol><h4 id="黑帽和沙盒"><a href="#黑帽和沙盒" class="headerlink" title="黑帽和沙盒"></a>黑帽和沙盒</h4><ol><li>购买外链 【在淘宝等与权重高德网站交换外链】</li><li>垃圾站 【seqing - dubo 等非法大流量网站进行交换】【降权惩罚，关进沙盒，搜索引擎扔进小黑屋】</li><li>黑客行为 【攻击网站，恶意添加外链】</li></ol><h4 id="话术设置"><a href="#话术设置" class="headerlink" title="话术设置"></a>话术设置</h4><p>example：<br>    – 原标题： 前端开发，如何才能高新就业<br>    – 修改话术后： 一个菜鸟前端的百万年薪之路</p><h4 id="关键词的挖掘"><a href="#关键词的挖掘" class="headerlink" title="关键词的挖掘"></a>关键词的挖掘</h4><ol><li><p>头脑风暴</p></li><li><p>利用搜索引擎的相关搜索</p><ul><li>与排名靠前的网站使用相同的关键字， 蹭热度；</li><li>参考相关搜索中的关键词， 调整网站的关键字；</li></ul></li><li><p>工具</p><ul><li>工具-百度指数，对关键词查询</li></ul></li><li>长尾关键词<ul><li>使用关键词竞争对手少，但是也有一定量的关键词， 用户转换率高很多</li></ul></li></ol><h4 id="域名的选择"><a href="#域名的选择" class="headerlink" title="域名的选择"></a>域名的选择</h4><ol><li>后缀的选择<ul><li>.com商业性强，输入自动填入</li></ul></li><li>短域名</li><li>域名语义化</li><li>域名的使用历史查询</li></ol><h4 id="seo前端优化方案"><a href="#seo前端优化方案" class="headerlink" title="seo前端优化方案"></a>seo前端优化方案</h4><ol><li>代码去冗余 【精简代码、 模块化】</li><li>自动化【 工具 webpack~~~ 】</li><li>Html语义化【 P标签, h标签 a标签】</li><li>meat标签<br> – keywords<br> – description</li><li>title标签</li></ol><h4 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h4><ol><li>站群推广<br> –相同类似的网站互相链接，推广</li></ol><hr><h3 id="日子分析"><a href="#日子分析" class="headerlink" title="日子分析"></a>日子分析</h3><h3 id="推广工具"><a href="#推广工具" class="headerlink" title="推广工具"></a>推广工具</h3><ol><li>百度推广</li><li>百度统计</li><li>百度指数</li><li>CNZZ</li><li>爱站网</li><li>站长工具</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018上半年学习资料整理&amp;学习计划[5]</title>
      <link href="/blog/2018/study/study2014-05/"/>
      <url>/blog/2018/study/study2014-05/</url>
      
        <content type="html"><![CDATA[<p>每天收集一点，每天学习一点</p><a id="more"></a><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li><a href="https://docschina.org/" target="_blank" rel="noopener">印记中文网</a></li></ol><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><ol><li><a href="http://www.php.cn/course/825.html" target="_blank" rel="noopener">css3视频教程</a></li></ol><h4 id="NestJS"><a href="#NestJS" class="headerlink" title="NestJS"></a>NestJS</h4><ol><li><a href="https://docs.nestjs.cn/4.6/customdecorators" target="_blank" rel="noopener">NestJS中文网</a></li><li><a href="https://github.com/typestack/class-validator" target="_blank" rel="noopener">验证器class-validator</a></li><li><a href="http://typeorm.io/#/select-query-builder" target="_blank" rel="noopener">数据库api</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node学习（一）</title>
      <link href="/blog/2018/js/node/nodestudy-01/"/>
      <url>/blog/2018/js/node/nodestudy-01/</url>
      
        <content type="html"><![CDATA[<p>tips: Api写法：Error-first Callback 和 EventEmitter<br><a id="more"></a></p><h5 id="a-在node的回调中错误优先"><a href="#a-在node的回调中错误优先" class="headerlink" title="a) 在node的回调中错误优先"></a>a) 在node的回调中错误优先</h5><p>应该先定义错误的返回接收函数</p><ul><li>回调函数的第一个参数返回的error对象，如果error发生了，它会作为第一个err参数返回，如果没有，一般做法是返回null。</li><li>回调函数的第二个参数返回的是任何成功响应的结果数据。如果结果正常，没有error发生，err会被设置为null，并在第二个参数就出返回成功结果数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// process the error and result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语义上讲，非空的“err”相当于程序异常；而空的“err”相当于可以正常返回结果“res”，无任何异常。</p><h5 id="b-EventEmitter"><a href="#b-EventEmitter" class="headerlink" title="b) EventEmitter"></a>b) EventEmitter</h5><p>事件模块是 Node.js 内置的对观察者模式“发布/订阅”（publish/subscribe）的实现，通过EventEmitter属性，提供了一个构造函数。该构造函数的实例具有 on 方法，可以用来监听指定事件，并触发回调函数。任意对象都可以发布指定事件，被 EventEmitter 实例的 on 方法监听到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">var</span> life = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"><span class="comment">// 设置可以添加的事件数量</span></span><br><span class="line">life.setMaxListeners(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 添加事件</span></span><br><span class="line"><span class="keyword">var</span> water = <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'给'</span> + who + <span class="string">'倒杯水！'</span>)</span><br><span class="line">&#125;</span><br><span class="line">life.on(<span class="string">'求安慰'</span>, water)</span><br><span class="line"></span><br><span class="line">life.on(<span class="string">'求安慰'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'给'</span> + who + <span class="string">'做饭！'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 总共可以添加10个事件 【默认】</span></span><br><span class="line"><span class="comment">// 超出会有报出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">life.emit(<span class="string">'求安慰'</span>, <span class="string">'汉子'</span>)</span><br><span class="line"><span class="comment">// 事件移除</span></span><br><span class="line"><span class="comment">// 将回调函数具名化 移除某一个事件</span></span><br><span class="line">life.removeListener(<span class="string">'求安慰'</span>, water)</span><br><span class="line"><span class="comment">// 全部移除</span></span><br><span class="line">life.removeAllListeners()</span><br><span class="line"><span class="comment">// 移除某一个事件</span></span><br><span class="line">life.removeListener(<span class="string">'求安慰'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测事件是否监听</span></span><br><span class="line"><span class="keyword">var</span> hasLifeListener = life.emit(<span class="string">'求安慰'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'求安慰事件是否监听:'</span> + hasLifeListener)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测事件监听的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'life 上添加的事件数量是:'</span> + life.listeners(<span class="string">'求安慰'</span>).length)</span><br><span class="line"><span class="built_in">console</span>.log(EventEmitter.listenerCount(life, <span class="string">'求安慰'</span>))</span><br></pre></td></tr></table></figure><h5 id="c-buffer"><a href="#c-buffer" class="headerlink" title="c) buffer"></a>c) buffer</h5><p>Buffer： 是一个对象， 是一个构造函数； 实例：V8引擎分配的一段内存；基本是一个数组，整数值；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Buffer(<span class="number">123</span>)</span><br><span class="line"><span class="comment">//  &lt;Buffer 31 32 33&gt;</span></span><br><span class="line">默认编码格式 utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">指定编码：</span><br><span class="line"><span class="keyword">new</span> Buffer(<span class="string">'123'</span>, <span class="string">'base64'</span>)</span><br><span class="line"><span class="comment">// &lt;Buffer d7 6d&gt;</span></span><br><span class="line"></span><br><span class="line">长度：</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">8</span>)   </span><br><span class="line">buf.length   <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">限制长度，写入会被截取</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="number">6</span>)</span><br><span class="line">buf.write(<span class="string">'12345678'</span>)</span><br><span class="line">buf <span class="comment">// &lt;Buffer 31 32 32 33 34 35&gt;   6位 超出不会被缓冲</span></span><br><span class="line"></span><br><span class="line">实例化数组，可以用下表读取到；</span><br><span class="line"><span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer([<span class="number">1</span>,<span class="number">2.22</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">buf[<span class="number">0</span>]   <span class="comment">// 1</span></span><br><span class="line">buf[<span class="number">1</span>]   <span class="comment">// 2  [自动取证]</span></span><br></pre></td></tr></table></figure></p><p>buffer转化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> buf = <span class="keyword">new</span> Buffer(<span class="string">'12345'</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> str = buf.toString(<span class="string">'base64'</span>)</span><br><span class="line"><span class="comment">//&gt; str  'MTIzNDU='</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">var</span> buf2 = <span class="keyword">new</span> Buffer(str, <span class="string">'base64'</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> str2 = buf2.toString()</span><br><span class="line"><span class="comment">// &gt; str2  12345</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解react中的constructor与super</title>
      <link href="/blog/2018/js/react/react-constructor-super/"/>
      <url>/blog/2018/js/react/react-constructor-super/</url>
      
        <content type="html"><![CDATA[<blockquote><p>react中的constructor与super</p></blockquote><a id="more"></a><h4 id="constructor-—–super-的基本含义"><a href="#constructor-—–super-的基本含义" class="headerlink" title="constructor( )—–super( )的基本含义"></a>constructor( )—–super( )的基本含义</h4><p>constructor( )——构造方法</p><p>　　这是ES6对类的默认方法，通过 new 命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显示定义，则会默认添加空的constructor( )方法。</p><p>super( ) ——继承</p><p>　　在class方法中，继承是使用 extends 关键字来实现的。子类 必须 在 constructor( )调用 super( )方法，否则新建实例时会报错。</p><p>　　报错的原因是：子类是没有自己的 this 对象的，它只能继承自父类的 this 对象，然后对其进行加工，而super( )就是将父类中的this对象继承给子类的。没有 super，子类就得不到 this 对象。</p><h4 id="Es5—–Es6关于继承的实现不同之处"><a href="#Es5—–Es6关于继承的实现不同之处" class="headerlink" title="Es5—–Es6关于继承的实现不同之处"></a>Es5—–Es6关于继承的实现不同之处</h4><p>出现上面情况的原因是，ES5的继承机制与ES6完全不同。</p><p>复习一个重要知识点——ES5中new到底做了些啥？</p><p>　<code>当一个构造函数前加上new的时候，背地里来做了四件事：</code></p><p>　　　　<code>1.生成一个空的对象并将其作为 this；</code></p><p>　　　　<code>2.将空对象的 __proto__ 指向构造函数的 prototype；</code></p><p>　　　　<code>3.运行该构造函数；</code></p><p>　　　　<code>4.如果构造函数没有 return 或者 return 一个返回 this 值是基本类型，则返回this；如果 return 一个引用类型，则返回这个引用类型。</code></p><p>简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用 super( )方法），完后再用子类的构造函数修改this。</p><h4 id="super-props-——super-—–以及不写super的区别"><a href="#super-props-——super-—–以及不写super的区别" class="headerlink" title="super(props)——super()—–以及不写super的区别"></a>super(props)——super()—–以及不写super的区别</h4><p>　　如果你用到了constructor就必须写super(),是用来初始化this的，可以绑定事件到this上;</p><p>　　如果你在constructor中要使用this.props,就必须给super加参数：super(props)；</p><p>　　（无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的；）</p><p>　　如果没用到constructor,是可以不写的；React会默认添加一个空的constructor。</p>]]></content>
      
      
      <categories>
          
          <category> react框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018上半年学习资料整理&amp;学习计划[4]</title>
      <link href="/blog/2018/study/study2018-04/"/>
      <url>/blog/2018/study/study2018-04/</url>
      
        <content type="html"><![CDATA[<p>每天收集一点，每天学习一点</p><a id="more"></a><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ol><li><a href="https://juejin.im/post/5ac9b72cf265da23906c486a" target="_blank" rel="noopener">小程序登录鉴权-手把手</a></li></ol><h4 id="node-js-–express"><a href="#node-js-–express" class="headerlink" title="node.js –express"></a>node.js –express</h4><ol start="0"><li><a href="https://cnodejs.org/" target="_blank" rel="noopener">node社区</a></li><li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">express入门指南</a></li></ol><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><ol start="2"><li><a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">Promise 迷你书</a></li><li><a href="https://cnodejs.org/topic/569c8226adf526da2aeb23fd" target="_blank" rel="noopener">理解 Promise 的工作原理</a></li><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de" target="_blank" rel="noopener">Node.js最新技术栈之Promise篇</a></li></ol><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ol><li><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">axios中文文档</a></li></ol><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ol><li><a href="http://blog.doyoe.com/" target="_blank" rel="noopener">css探索之旅</a></li><li><a href="http://demo.doyoe.com/" target="_blank" rel="noopener">Web前端实验室</a></li><li><a href="http://www.css88.com/tool/css3Preview/Box-Shadow.html" target="_blank" rel="noopener">在线阴影生成方法</a></li><li><a href="http://www.daqianduan.com/3737.html" target="_blank" rel="noopener">CSS3中的伪类 nth-child选择器</a></li></ol><h4 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h4><ol><li><a href="https://eslint.org/" target="_blank" rel="noopener">ESlint配置官网</a></li><li><a href="http://eslint.cn/" target="_blank" rel="noopener">ESlint配置官网(zh)</a></li><li><a href="https://zhuanlan.zhihu.com/p/28906725" target="_blank" rel="noopener">ESlint知乎配置大全</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018上半年学习资料整理&amp;学习计划[3]</title>
      <link href="/blog/2018/study/study2018-03/"/>
      <url>/blog/2018/study/study2018-03/</url>
      
        <content type="html"><![CDATA[<p>每天收集一点，每天学习一点</p><a id="more"></a><h4 id="git使用学习"><a href="#git使用学习" class="headerlink" title="git使用学习"></a>git使用学习</h4><ol><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git快速学习教程-廖雪峰的网站</a></li><li><a href="https://www.git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git" target="_blank" rel="noopener">git使用原理文档</a></li></ol><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ol><li><a href="http://ruizhengyun.cn/" target="_blank" rel="noopener">胖芮的博客–很多学习的东西</a></li><li><a href="http://fehey.com/hve-blog/index.html" target="_blank" rel="noopener">博客框架的的例子</a></li></ol><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ol><li><a href="https://zhimap.com/mmap/2d0dc65361fc429fb4f5432592e3f976" target="_blank" rel="noopener">vue快速入门，全家桶知识学习</a></li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li><a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">hexo官网</a></li></ol><h4 id="webpack学习"><a href="#webpack学习" class="headerlink" title="webpack学习"></a>webpack学习</h4><ol><li><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">webpack小书</a></li><li><a href="https://fakefish.github.io/react-webpack-cookbook/index.html" target="_blank" rel="noopener">webpack【gitbook】</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取浏览器url 参数</title>
      <link href="/blog/2018/js/common/parseUrlParams/"/>
      <url>/blog/2018/js/common/parseUrlParams/</url>
      
        <content type="html"><![CDATA[<h4 id="1、获取当前url的方法："><a href="#1、获取当前url的方法：" class="headerlink" title="1、获取当前url的方法："></a>1、获取当前url的方法：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前url = <span class="string">'https://www.jianshu.com/search?q=%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;page=1&amp;type=note'</span></span><br><span class="line"><span class="keyword">var</span> href = <span class="built_in">window</span>.location.href    <span class="comment">// 获取完整 url路径</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="built_in">window</span>.location.search  <span class="comment">// 获取从？开始的参数部分</span></span><br></pre></td></tr></table></figure><h4 id="2、将url中的参数转换成中文"><a href="#2、将url中的参数转换成中文" class="headerlink" title="2、将url中的参数转换成中文"></a>2、将url中的参数转换成中文</h4><p> 知识点 来自W3C</p><h5 id="编码encodeURI-解码decodeURI"><a href="#编码encodeURI-解码decodeURI" class="headerlink" title="编码encodeURI() 解码decodeURI()"></a>编码<code>encodeURI()</code> 解码<code>decodeURI()</code></h5><ol><li>把字符串作为 URI 进行编码。</li><li>对 / ? : @ &amp; = + $ #  不会转义。</li></ol><h5 id="编码-encodeURIComponent-解码-decodeURIComponent"><a href="#编码-encodeURIComponent-解码-decodeURIComponent" class="headerlink" title="编码 encodeURIComponent()  解码 decodeURIComponent()"></a>编码 <code>encodeURIComponent()</code>  解码 <code>decodeURIComponent()</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> src = <span class="string">'%2F2018%2F02%2F06%2Fjs%2Fcommon%2FparseUrlParams%2F'</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(src) <span class="comment">// "/2018/02/06/js/common/parseUrlParams/"</span></span><br></pre></td></tr></table></figure><ol><li>把字符串作为 URI 组件进行编码。</li><li>不会对 ASCII 字母和数字进行编码，</li><li>也不会对这些 ASCII 标点符号 - _ . ! ~ * ‘ ( ) 进行编码：</li><li>其他字符（比如 ：;/?:@&amp;=+$,# 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</li></ol><h4 id="3、获取URL参数"><a href="#3、获取URL参数" class="headerlink" title="3、获取URL参数"></a>3、获取URL参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="built_in">decodeURI</span>(search) <span class="comment">// 编码字符 解码</span></span><br><span class="line"><span class="keyword">var</span> splitIndex = url.indexOf(<span class="string">'?'</span>)  <span class="comment">// 返回第一个？号的位置</span></span><br><span class="line"><span class="keyword">var</span> str = url.substring(splitIndex + <span class="number">1</span>) <span class="comment">// 获取到查询参数</span></span><br></pre></td></tr></table></figure><h5 id="3-1-获取url中某一个参数的值的方法"><a href="#3-1-获取url中某一个参数的值的方法" class="headerlink" title="3.1 获取url中某一个参数的值的方法"></a>3.1 获取url中某一个参数的值的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> getStrParam = <span class="function"><span class="keyword">function</span> (<span class="params">str, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">var</span> r = str.match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> r[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-获取url中所有的参数，序列在在一个对象中；"><a href="#3-2-获取url中所有的参数，序列在在一个对象中；" class="headerlink" title="3.2 获取url中所有的参数，序列在在一个对象中；"></a>3.2 获取url中所有的参数，序列在在一个对象中；</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> getAllUrlParam = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> urlArr = str.split(<span class="string">'&amp;'</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg = urlArr[i].split(<span class="string">'='</span>)</span><br><span class="line">        obj[arg[<span class="number">0</span>]] = arg[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>一道练手题送给大家：</strong><br>将URL中的参数序列化在一个对象中，相同的key存放在一个数组中，值为空的key，默认为true？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'https://www.jianshu.com/search?q=%E5%8F%82%E6%95%B0&amp;page=1&amp;type=&amp;key=aa&amp;key=bb&amp;'</span></span><br></pre></td></tr></table></figure></p><p>预期结果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    q: <span class="string">'参数'</span>,  <span class="comment">// 中文</span></span><br><span class="line">    page: <span class="string">"1"</span>,</span><br><span class="line">    type: <span class="literal">true</span>, <span class="comment">// 空值为ture</span></span><br><span class="line">    key: [<span class="string">"aa"</span>, <span class="string">"bb"</span>] <span class="comment">// 相同的key放在数组中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阮一峰：时间管理的七句话</title>
      <link href="/blog/2017/others/time-manage/"/>
      <url>/blog/2017/others/time-manage/</url>
      
        <content type="html"><![CDATA[<p>时间对每一个人来说都是重要的，学会管理时间；</p><a id="more"></a><h3 id="一、-进程切换非常昂贵，避免多任务，保持单进程。"><a href="#一、-进程切换非常昂贵，避免多任务，保持单进程。" class="headerlink" title="一、 进程切换非常昂贵，避免多任务，保持单进程。"></a>一、 进程切换非常昂贵，避免多任务，保持单进程。</h3><p><img src="/public_s/images/timeManage/0.5021243947689109.png" alt="图片"></p><p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p><p>上图是多任务状态和单进程状态的对比，可以看到，多任务状态会花费更多的时间。</p><h3 id="二、研究表明，集中注意力、高效工作，每天最多4小时。"><a href="#二、研究表明，集中注意力、高效工作，每天最多4小时。" class="headerlink" title="二、研究表明，集中注意力、高效工作，每天最多4小时。"></a>二、研究表明，集中注意力、高效工作，每天最多4小时。</h3><p><img src="/public_s/images/timeManage/0.9251521097293676.png" alt="图片"></p><p>一个人能够集中注意力的时间，是有限的。一般来说，高效工作只能持续四个小时，其余时间就都是低效工作了。</p><p>上图左侧是大多数人每天的时间分配，如果你能保证4个小时都高效工作，那么完全可以变成右侧的时间分配。</p><h3 id="三、划分任务的优先级，不要把’急切’当作’重要’。"><a href="#三、划分任务的优先级，不要把’急切’当作’重要’。" class="headerlink" title="三、划分任务的优先级，不要把’急切’当作’重要’。"></a>三、划分任务的优先级，不要把’急切’当作’重要’。</h3><p><img src="/public_s/images/timeManage/0.530341774969219.png" alt="图片"></p><p>你的时间有限，不可能做所有事。最重要的事，应该首先做。（推荐阅读《什么是重要的事情？》）</p><p>一个有用的技巧是，将所有任务按照、重要性、和紧急性两个维度，分成四个象限。第一象限优先级最高，第四象限最低。</p><h3 id="四、起床后，不要查看邮件和微信。"><a href="#四、起床后，不要查看邮件和微信。" class="headerlink" title="四、起床后，不要查看邮件和微信。"></a>四、起床后，不要查看邮件和微信。</h3><p><img src="/public_s/images/timeManage/0.1174553194175334.png" alt="图片"></p><p>早晨精力最充沛，消耗在邮件和微信就太可惜了，应该用来做更重要的事。而且，邮件代表对别人优先级高，不等于对你优先级高。你的时间到底属于谁？你自己，还是某个给你写信的人？（推荐阅读《为什么起床后不能收邮件？》）</p><h3 id="五、避免开会，因为人类已知的最浪费时间的事情，就是开会。"><a href="#五、避免开会，因为人类已知的最浪费时间的事情，就是开会。" class="headerlink" title="五、避免开会，因为人类已知的最浪费时间的事情，就是开会。"></a>五、避免开会，因为人类已知的最浪费时间的事情，就是开会。</h3><p><img src="/public_s/images/timeManage/0.46321933528434545.png" alt="图片"></p><p>越大的公司，越无法避免开会。但至少不要参加与你无关的会。站着开会，也许是一个缩短会议时间的好办法。</p><h3 id="六、早晨4点起床，到了中午，你就完成了一天的任务。"><a href="#六、早晨4点起床，到了中午，你就完成了一天的任务。" class="headerlink" title="六、早晨4点起床，到了中午，你就完成了一天的任务。"></a>六、早晨4点起床，到了中午，你就完成了一天的任务。</h3><p><img src="/public_s/images/timeManage/0.7242512129749097.png" alt="图片"></p><p>早晨4点起床开始工作，你会发现每天的时间多出了好多。有个日本人写了一本书《四点起床》，就是讲这个观点。</p><h3 id="七、你没空时不会做的事情，有空了也不会做。"><a href="#七、你没空时不会做的事情，有空了也不会做。" class="headerlink" title="七、你没空时不会做的事情，有空了也不会做。"></a>七、你没空时不会做的事情，有空了也不会做。</h3><p><img src="/public_s/images/timeManage/0.419097318675272.png" alt="图片"></p><p>世上并没有拖延症，只是不想做而已。如果可能，应该尽早放弃你没有意愿去做的那些事。而那些没有时间也会去做的事，才是你应该全力以赴的人生方向。</p><p>来源： <a href="http://www.techug.com/post/time-management.html" target="_blank" rel="noopener">http://www.techug.com/post/time-management.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经过了这么多年的努力，理想终于成了泡影---猎场经典台词</title>
      <link href="/blog/2017/others/move-review-liechang/"/>
      <url>/blog/2017/others/move-review-liechang/</url>
      
        <content type="html"><![CDATA[<p>经典歌曲 :   一场恋爱</p><hr><p><audio style="width: 500px" autoplay="autoplay" src="/public_s/mp3/a-love.mp3" controls="controls"><br>你的浏览器暂不支持！<br></audio><br><small style="color: #808080; font-size: 12px">歌曲通过QQ音乐付费下载， 此处引用，如有侵权，联系删除 </small></p><hr><p>God gives every individual life time is very limited, if we do not for their own destiny scurry, traces of life is too short.</p><p>上天赋予每个生命个体的时间非常有限,若我们不为自己的命运疾走,生命的痕迹就显得太短浅了。</p><ol><br><br><li> “如果记忆是一个罐头，我希望它永远不会过期”。 ———-引用自电影《重庆森林》</li><br><li> “时间是一个伟大的作者，它必将写出最完美的答案”。 ———引用自卓别林</li><br><li> “山中何所有 ，岭上多白云”。 —————-引用自陶弘景</li><br><br></ol><p><br></p><ol><li><p>岁月如刀，我似芹萝，时间太可怕了。</p></li><li><p>经过了这么多年的努力，理想终于成了泡影。</p></li><li><p>时间过得太快了 要是能倒着活就好了 所有的选择都是正确的人生就是满分——郑秋冬 </p></li><li><p>女人不仅是个伴，还能让我活得不那么糙。</p></li><li><p>女人，是可以改变生活的。谈情说爱很辛苦，而你好像总是在偷懒。</p></li><li><p>我能见证你们的成长，那是我人生之大幸你们不发财天理难容我的今天，就是你们的明天，所以你们一定要对自己有信心打鸡血，撒狗血，流鼻血，直到血脉偾张</p></li><li><p>“退一步海阔天空”这话没错，“狭路相逢勇者胜”这话也没错，可它们的字面意思却是冲突的，人生就是体会矛盾的过程。     </p></li><li><p>只要你还没钻进坟墓里，一切就只是开始。</p></li><li><p>职介所是帮助没有工作的人找工作，人力资源是帮优秀的人找更适合的职位，也就是网罗高级人才或挖掘高端人才。</p></li><li><p>这不就是我吗,即便作为猎头的同行，我也要跟你谈谈，禁止游戏的法则。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件的使用</title>
      <link href="/blog/2017/frame/vue/vue-study-03/"/>
      <url>/blog/2017/frame/vue/vue-study-03/</url>
      
        <content type="html"><![CDATA[<p>vue中组价的使用方式？<br><a id="more"></a><br>description: </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iview组件使用的踩坑记录</title>
      <link href="/blog/2017/frame/vue/vue-study-iview/"/>
      <url>/blog/2017/frame/vue/vue-study-iview/</url>
      
        <content type="html"><![CDATA[<p>级联选择器的校验， 导航Tabs的使用<br><a id="more"></a></p><h2 id="级联选择起的校验"><a href="#级联选择起的校验" class="headerlink" title="级联选择起的校验"></a>级联选择起的校验</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-08 16:03:39 </div><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Form</span> <span class="attr">:label-width</span>=<span class="string">"100"</span> <span class="attr">ref</span>=<span class="string">"formData"</span> <span class="attr">:rules</span>=<span class="string">"ruleValidate"</span> <span class="attr">:model</span>=<span class="string">"formData"</span> <span class="attr">inline</span> <span class="attr">class</span>=<span class="string">"wms-form-check oneline"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Form-item</span> <span class="attr">label</span>=<span class="string">"收货地址："</span> <span class="attr">style</span>=<span class="string">"width:532px"</span> <span class="attr">prop</span>=<span class="string">"region"</span> `@注意<span class="attr">region</span>`&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cascader</span> <span class="attr">:data</span>=<span class="string">"provinceCity"</span> <span class="attr">v-model</span>=<span class="string">"formData.region"</span> `@注意<span class="attr">region</span>` <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">trigger</span>=<span class="string">"hover"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cascader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wmsValidate <span class="keyword">from</span> <span class="string">'wmsValidate</span></span><br><span class="line"><span class="string">data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        formData: &#123;</span></span><br><span class="line"><span class="string">            region: []</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        ruleValidate: &#123;</span></span><br><span class="line"><span class="string">            ownerName: [&#123;required: true, message: '</span>货主名称不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            type: [&#123;required: true, message: '</span>单据类型不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            contactsName: [&#123;required: true, message: '</span>联系人不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            contacts: [&#123;required: true, message: '</span>联系方式不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            region: [ --@注意--</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    validator: wmsValidate.proviinceValidate,</span></span><br><span class="line"><span class="string">                    required: true,</span></span><br><span class="line"><span class="string">                    trigger: '</span>change<span class="string">',</span></span><br><span class="line"><span class="string">                    fullField: '</span>address<span class="string">'</span></span><br><span class="line"><span class="string">                &#125;],</span></span><br><span class="line"><span class="string">            address: [&#123;required: true, message: '</span>详细地址不能为空<span class="string">', trigger: '</span>blur<span class="string">'&#125;],</span></span><br><span class="line"><span class="string">            shippingMethod: [&#123;required: true, message: '</span>送货方式不能为空<span class="string">', trigger: '</span>change<span class="string">'&#125;]</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">            &#125;,  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="检验地址控件的方法"><a href="#检验地址控件的方法" class="headerlink" title="检验地址控件的方法"></a>检验地址控件的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 校验地址控件选择 必填, 不能双向绑定 改变数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">wmsValidate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> proviinceValidate(rule, value, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_.isArray(value) &amp;&amp; value.length === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> callback()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'地址不能为空'</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Tisp：</strong> <code>v-model</code>绑定的名字，<code>prop</code>的名字，和<code>validate</code>中的名字必须一致，<code>validate</code>中才能接收到值<br><br></p><h2 id="iview中tabs的使用"><a href="#iview中tabs的使用" class="headerlink" title="iview中tabs的使用"></a>iview中tabs的使用</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-15 09:46:55 </div><p>正确使用姿势：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">v-if</span>=<span class="string">"pageName!=='detail'"</span> <span class="attr">type</span>=<span class="string">"card"</span> <span class="attr">class</span>=<span class="string">"wms-mt10 wms-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tab-pane</span> <span class="attr">label</span>=<span class="string">"出库箱信息"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Tab-pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"pageName!=='detail'"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Tisp：</strong>： 不能将<code>Tabs</code>放在 带有<code>v-if</code>属性的<code>div</code>中</p><p><br></p><h2 id="iview中Model弹窗二次点击依然会关闭问题"><a href="#iview中Model弹窗二次点击依然会关闭问题" class="headerlink" title="iview中Model弹窗二次点击依然会关闭问题"></a>iview中Model弹窗二次点击依然会关闭问题</h2><div style="color: #808080; font-size: 12px; text-align: right">2017-11-16 18:39:55 </div><p> 确定按钮点击 –会自动关闭<code>Model</code>, 添加属性 <code>:loading</code>后需要在<code>@on-ok</code>事件中手动去设置关闭<br> Tips: <code>:loading</code>初始值为要设置为 <code>true</code><br> <strong>问题：</strong> 首次点击未手动设置model关闭， 再次点击依然会自动关闭？<br> 场景：</p><blockquote><p>html</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Modal</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">"syncUploadPop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:mask-closable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">on-ok</span>=<span class="string">"accountUnload"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"uploadLoading"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Model</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>js</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         syncUploadPop: <span class="literal">false</span>,      <span class="comment">// 弹出款默认不显示</span></span><br><span class="line">         uploadLoading: <span class="literal">true</span>        <span class="comment">// 上传中</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> accountUnload() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.uploadLoading = <span class="literal">true</span>   <span class="comment">// 确定点击显示 加载中、、、</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> request.post(InterObj.accountUnloadTo, params)</span><br><span class="line">        <span class="keyword">this</span>.uploadLoading = <span class="literal">false</span>  <span class="comment">// 请求成功取消 加载中、、、</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------解决问题的核心代码------</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.uploadLoading = <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// -------解决问题的核心代码------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res.result === <span class="string">'success'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.success(res.msg)</span><br><span class="line">            <span class="keyword">this</span>.syncUploadPop = <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$Message.error(res.msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>总结：</strong> <code>:loading</code>设置成false取消 加载中状态后，需要在线程最后依然将 他设置为<code>true</code></p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iview组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的计算属性 computed</title>
      <link href="/blog/2017/frame/vue/vue-study-computed/"/>
      <url>/blog/2017/frame/vue/vue-study-computed/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中使用计算属性-computed"><a href="#vue中使用计算属性-computed" class="headerlink" title="vue中使用计算属性 computed"></a>vue中使用计算属性 computed</h2><blockquote><p>html Vue:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_number&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_numObj&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;&#123;&#123;cpu_numObj2&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>javaScript:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        number: <span class="number">1</span>,</span><br><span class="line">        numObj: &#123;&#125;,</span><br><span class="line">        numObj2: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    cpu_number: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number ++</span><br><span class="line">    &#125;,</span><br><span class="line">    cpu_numObj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numObj.type = <span class="string">'直接改变对象属性'</span>    <span class="comment">// 计算属性不会检测到</span></span><br><span class="line">        <span class="keyword">return</span> numObj.type</span><br><span class="line">    &#125;</span><br><span class="line">    cpu_numObj2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numObj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;<span class="attr">type</span>: <span class="string">'改变了对象索引'</span>&#125;)    <span class="comment">// 计算属性会检测到</span></span><br><span class="line">        <span class="keyword">return</span> numObj2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>： vue 计算属性computed可以检测到 <code>变量</code>  <code>数组</code>  <code>对象的</code>变化； 但是 对象的属性变化是不会被检测到的</p>]]></content>
      
      
      <categories>
          
          <category> vue框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每个JavaScript程序员都需要知道的5个数组方法</title>
      <link href="/blog/2017/js/array/array-method-01/"/>
      <url>/blog/2017/js/array/array-method-01/</url>
      
        <content type="html"><![CDATA[<h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h3><blockquote><p>.forEach() 方法能够方便的让你 遍历数组里的每个元素，你可以在回调函数里对每个元素进行操作。<br> .forEach()方法没有返回值，你不需要在回调函数里写return，这是无意义的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = [<span class="string">'9'</span>, <span class="string">'13'</span>, <span class="string">'10'</span>];</span><br><span class="line">score.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index)</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="comment">//  9  0</span></span><br><span class="line">    <span class="comment">// 13  1</span></span><br><span class="line">    <span class="comment">// 10  2</span></span><br></pre></td></tr></table></figure><h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h3><blockquote><p>  .map() 方法能够遍历整个数组，然后 返回一个新数组，这个新数组里的元素是经过了指定的回调函数处理过的。<br>如果你想修改数组里的每个元素，然后将修改后的数组存入新的数组，那使用 .map() 方法最方便。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> doubleNums = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'doubleNums: '</span>, doubleNums)</span><br></pre></td></tr></table></figure><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h3><blockquote><p>.filter() 方法能够 过滤掉数组中的某些元素，你可以在回调函数里设定条件，不符合条件的元素都会排除在外。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> topScores = scores.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'topScores: '</span>, topScores);</span><br></pre></td></tr></table></figure><h3 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a>Array.indexOf()</h3><blockquote><p>indexOf() 能够告诉你 某个元素在数组中的位置，它返回的是索引值，如果数组里有重复的元素，它会返回第一个元素的位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> i = a.indexOf(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i: '</span>, i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (a.indexOf(7) === -1) &#123;</span></span><br><span class="line"><span class="comment">  // 数组中没有这个元素</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h3><blockquote><p>.every() 方法的作用是用指定的回调函数去检查数组中的每个元素，如果对于每个元素，这个回调函数都返回true，则.every()返回true。否则，.every() 返回false。<br>如果你想知道数组中的所有元素都是否符合某种条件，使用 .every() 最方便。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">23</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> olderThan18 = ages.every(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">18</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'olderThan18: '</span>, olderThan18);</span><br></pre></td></tr></table></figure><p>Tips: 上面的这5个方法只是很多JavaScript方法中关于数组的最重要的几个，还有很多关于数组的方法、工具包(lodash and underscore)等都非常的有用。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之call的用法</title>
      <link href="/blog/2017/js/array/js-call/"/>
      <url>/blog/2017/js/array/js-call/</url>
      
        <content type="html"><![CDATA[<h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><p><strong>一说到call</strong>，</p><p>————总是<strong><code>call</code></strong>、‘张三’、‘李四’的区别什么什么的，说的很清楚，转身还是傻傻分不清楚他们的区别了，相似的事情总是喜欢一起来说，这对于新手来说总是容易混乱的，今天就来理解下call的用法；</p><p><strong>通俗点：</strong></p><blockquote><p><strong><code>call</code></strong>的作用就是： <strong>改变函数执行时的上下文</strong> 也就是<code>this</code>的指向;</p></blockquote><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><pre><code>Food.call(thisArg, arg1, arg2, ...)</code></pre><h3 id="来看个例子-—-A"><a href="#来看个例子-—-A" class="headerlink" title="来看个例子 — A"></a>来看个例子 — A</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'fun-name'</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="string">'fun-age'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> wrap = &#123;</span><br><span class="line"> age: <span class="string">'default'</span>,</span><br><span class="line"> name: <span class="string">'default'</span>,</span><br><span class="line"> myfun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> fun()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrap.myfun();</span><br><span class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'default-age'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'fun-age'</span></span><br></pre></td></tr></table></figure><p>直接运行这个函数 <strong><code>wrap.myfun();</code></strong></p><blockquote></blockquote><p>执行这个函数后<br>1、在wrap下面执行<code>myfun()</code>后，其中的this指向window全局的<br>2、在window全局下面创建了一个 <code>age</code>属性，值为 <code>&#39;fun-age&#39;</code><br>3、wrap中的<code>age</code>还是default</p><h3 id="来看个例子-—-B"><a href="#来看个例子-—-B" class="headerlink" title="来看个例子 — B"></a>来看个例子 — B</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'fun-name'</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="string">'fun-age'</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> wrap = &#123;</span><br><span class="line"> age: <span class="string">'default'</span>,</span><br><span class="line"> name: <span class="string">'default'</span>,</span><br><span class="line"> obj: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> fun.call(<span class="keyword">this</span>)      <span class="comment">// **---注意这里打 call 了---**</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wrap.myfun();</span><br><span class="line"><span class="built_in">console</span>.log(wrap.age)   <span class="comment">// 'fun-age'        --发生了变化---</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age)  <span class="comment">// 'age is not defined'   --发生了变化---</span></span><br></pre></td></tr></table></figure><p>例子B运行时：<br><div class="note success">            <p>wrap.obj()执行后，在执行<code>fun</code>时，把this， call进去了, 这个this是指向<code>wrap</code>，所以<code>fun</code>执行时其中的this指向的是<code>wrap</code>，自然改变的就是<code>wrap</code>中的age，这就是<code>call</code>的作用改变了<code>fun</code>执行时的上下文；</p>          </div><br>好累，反正我是大概懂了他（this）刚才干了什么；</p><hr><p>那么在我们的coding中，一般什么时候用到call了？</p><h2 id="call的用法"><a href="#call的用法" class="headerlink" title="call的用法"></a>call的用法</h2><h3 id="利用call来-做继承"><a href="#利用call来-做继承" class="headerlink" title="利用call来 做继承"></a>利用call来 做继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'longlee'</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> student = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> st = <span class="keyword">new</span> student ();</span><br><span class="line"></span><br><span class="line">g1.fun()  <span class="comment">// 输出： longlee</span></span><br></pre></td></tr></table></figure><p>如果不在student函数中执行 call，new出来的实例是没有fun属性方法的；打call就可以实现继承Person方法了；</p><h3 id="判断数据的类型"><a href="#判断数据的类型" class="headerlink" title="判断数据的类型"></a>判断数据的类型</h3><p>【object、 array、 null】<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'longlee'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = [<span class="string">'longlee'</span>]</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj1)    <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj2)    <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj3)    <span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">12</span>)      <span class="comment">// "[object Number]"</span></span><br><span class="line">....</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><h3 id="类（伪）数组使用数组方法"><a href="#类（伪）数组使用数组方法" class="headerlink" title="类（伪）数组使用数组方法"></a>类（伪）数组使用数组方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="built_in">arguments</span>是函数接收的实际参数个数，他是一个伪数组，不具有数组的一般方法。比如 push、pop...,</span><br><span class="line"></span><br><span class="line">但是我们能通过 <span class="built_in">Array</span>.prototype.slice.call 转换为真正的数组</span><br><span class="line">这样 <span class="built_in">arguments</span> 就可以应用 <span class="built_in">Array</span> 下的所有方法了。</span><br></pre></td></tr></table></figure><h3 id="获取数组中的最大值和最小值"><a href="#获取数组中的最大值和最小值" class="headerlink" title="获取数组中的最大值和最小值"></a>获取数组中的最大值和最小值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">55</span>, <span class="number">888</span> , <span class="number">521</span> , <span class="number">-36</span>); <span class="comment">// 888</span></span><br><span class="line">number 本身没有 max 方法，但是 <span class="built_in">Math</span> 有，我们就可以借助 call 使用其方法。</span><br></pre></td></tr></table></figure><p>就说到这了，再说下去，我自己也快消化不良了、、、、</p><hr><p>题外话：<br>说到数组的最大值、最小值。我控制不住自己了，一个ES6的简洁方法<br><code>Math.max(...[2,1,3])</code>  // 3<br><code>Math.min(...[2,1,3])</code>  // 1</p><p>个人见解，有误之处，大神请指出，以免改正！<br>弄懂 call 了。可以继续打 call 了</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我忘记了自己，却没忘记你！</title>
      <link href="/blog/2017/others/live-tulei-01/"/>
      <url>/blog/2017/others/live-tulei-01/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一位老人找不到家了，他连自己的名字也忘记了，民警在他身上找到两样东西，一封40年前他写给爱人的信，和一张17年前爱人离世火化的证明。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;信的落款是1977年4月30日，名字的落款是“生”，信的开头是“亲爱的馨”。根据图片和信的内容来推算，写这封信的时候，他的妻子“馨”应该是43岁。信中所写都是些家长里短，对爱人身体的关心，工作和生活的琐事。唯有信中有两处最感人的地方，一处是对爱人的称呼是<code>“您”</code>，一处是信的结尾，<code>“一切尚好，不要挂念，好好保重身体。”</code>经了解，老人名叫张连生，今年87岁，妻子名叫孙懿馨，2000年离世，享年66岁！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一封40年前的信，一张17年前的火化证明，张老先生随身携带着这两样东西，尽管年事已高，忘却了很多往事，甚至是回家的路，却始终没忘了自己的爱人！我理解老人随身带着书信，是因为见字如面，但是为什么还带着一纸火化证明？我的妻子说，因为那是他爱人火化之前最后停留的地方！是的，17年前，张老先生看着爱人的遗体即将推进火化炉时，那是他看见爱人的最后一面，所有的爱都定格在了那一刻！从此，一封信，一张火化证明，就成为了爱人的全部，找不到回家的路不要紧，只要这两样东西在，老伴就在，家就在！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我想，多数人看到这样的故事，都会被深深的感动！因为这样的爱情，如今已经不多见。男人不再长情却多情，女人不再痴情更绝情！我们表达爱情的词汇越来越丰富，方式越来越浪漫，但华丽的背后是苍白！陪伴是最长情的告白！你若不离不弃，我必生死相依！等等，这样的语句无数次感动我们，但感动过后，往往一切照旧！如同此时的正在听故事的你们，也一定感动得<code>潸然泪下</code>，可是泪水过后，又会有多少<code>实质性的改变</code>？</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天我讲述这个故事，并不只是要感动你们，那不是这个故事真正的意义。我想说的是，生活是由普普通通的每一天组成，吃喝拉撒上班下班，枯燥的循环往复是生活的大多数，激情与浪漫只是偶尔的点缀。因为一张火化证明，我们被老人的深情思念所打动，但是要知道，在他爱人逝去的这17年，老先生每天都是这样度过。因为一封书信，我们感动于老人们往日的恩爱如初，但几十年如一日的相敬如宾，我们又能否做到？</p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>动人的爱情故事往往如此，一日的相爱是平凡，日复一日的相守是经典！观众们热泪盈眶，深受感动，但被感动很容易，要去付出感动对方却很难！主人公却并不觉得这有多么值得歌颂，因为他所做的这一切，既不为了感动对方，也不是为了感动自己，因为，那就是爱情本来的样子，<code>这一切的一切</code>，不为别的，<code>只是因为爱情</code> ！</strong></p><p>本文转载自： <a href="http://mp.weixin.qq.com/s/XeniC_LMro1fYJNrw-h3tg" target="_blank" rel="noopener">涂磊公众号</a></p><!-- ![图片](/public_s/images/mmexport1499932133535.jpeg) -->]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 命令集合</title>
      <link href="/blog/2017/others/hexo-command/"/>
      <url>/blog/2017/others/hexo-command/</url>
      
        <content type="html"><![CDATA[<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="打包构建静态文件"><a href="#打包构建静态文件" class="headerlink" title="打包构建静态文件"></a>打包构建静态文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="发布站点"><a href="#发布站点" class="headerlink" title="[发布站点]"></a>[发布站点]</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="noopener">http://blog.csdn.net/qq_23435721/article/details/50997275</a></p><h4 id="添加搜索的方法"><a href="#添加搜索的方法" class="headerlink" title="添加搜索的方法"></a>添加搜索的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>更多信息: <a href="http://moxfive.coding.me/yelee/2.Basic-Usage/local-site-search.html" target="_blank" rel="noopener">站内搜索</a><br>更多信息: <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">github地址</a></p><h4 id="seo优化"><a href="#seo优化" class="headerlink" title="seo优化"></a>seo优化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>更多信息: <a href="http://blog.csdn.net/qq_23435721/article/details/50997275" target="_blank" rel="noopener">优化教程</a><br>更多信息: <a href="http://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">优化教程</a><br>更多信息: <a href="http://www.arao.me/2015/hexo-next-theme-optimize-seo/" target="_blank" rel="noopener">优化教程</a></p><h4 id="首页显示tag的两种方法"><a href="#首页显示tag的两种方法" class="headerlink" title="首页显示tag的两种方法"></a>首页显示tag的两种方法</h4><ol><li><p>方法一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2000-12-03 00:00:00</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="name">Excerpt</span> <span class="attr">in</span> <span class="attr">index</span> | 首页摘要&gt;</span> </span><br><span class="line">+<span class="comment">&lt;!-- more --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">The</span> <span class="attr">rest</span> <span class="attr">of</span> <span class="attr">contents</span> | 余下全文&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2000</span><span class="bullet">-12</span><span class="bullet">-03</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line"><span class="string">+description:</span> <span class="string">"Welcome to Hexo! This is your very first post."</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;Contents&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo书写语法</title>
      <link href="/blog/2017/others/hexo/"/>
      <url>/blog/2017/others/hexo/</url>
      
        <content type="html"><![CDATA[<contents><h3 id="hexo-创建一个新页面的方法"><a href="#hexo-创建一个新页面的方法" class="headerlink" title="hexo 创建一个新页面的方法"></a>hexo 创建一个新页面的方法</h3><p>命令  <code>hexo new layout title tags</code></p><blockquote><p>layout会默认使用scaffolds中的post模板来生成一个新页面</p></blockquote><p>简写命令 <code>hexo new &#39;title&#39; tags</code></p><h3 id="摘要内置标签"><a href="#摘要内置标签" class="headerlink" title="摘要内置标签"></a>摘要内置标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; 内容 &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>其中，class_name 可以是以下列表中的一个值：</p><ul><li>default</li><li>primary</li><li>success</li><li>info</li><li>warning</li><li>danger</li></ul><div class="note ">            <p>default </p>          </div><div class="note primary">            <p>primary… </p>          </div><div class="note success">            <p>success… </p>          </div><div class="note info">            <p>info… </p>          </div><div class="note warning">            <p>warning… </p>          </div><div class="note danger">            <p>danger… </p>          </div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加代码文件方法 -- 默认目录在 downloads/code 下；</span></span><br><span class="line">&#123;% include_code appjs lang:javascript cssbreak.html %&#125;  </span><br><span class="line">&#123;% iframe http://localhost:4000/downloads/code/cssbreak.html 600 600 %&#125;  # 插入ifram方法</span><br></pre></td></tr></table></figure></contents>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
